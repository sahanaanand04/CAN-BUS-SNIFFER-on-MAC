
CANSniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004ba4  08004ba4  00005ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c2c  08004c2c  00005c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c34  08004c34  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          0000028c  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002f4  200002f4  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdeb  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002259  00000000  00000000  00012e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  000150e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009df  00000000  00000000  00015dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022174  00000000  00000000  0001679f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fda2  00000000  00000000  00038913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae8f  00000000  00000000  000486b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113544  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d6c  00000000  00000000  00113588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001172f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b8c 	.word	0x08004b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004b8c 	.word	0x08004b8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fdb0 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f814 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f9d6 	bl	800091c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000570:	f000 f87a 	bl	8000668 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000574:	f000 f93e 	bl	80007f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000578:	f000 f96a 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 800057c:	f000 f998 	bl	80008b0 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Send_CAN_Message();
 8000580:	f000 f8dc 	bl	800073c <Send_CAN_Message>
	  Receive_CAN_Message();
 8000584:	f000 f904 	bl	8000790 <Receive_CAN_Message>
	  HAL_Delay(1000);          // 1-second delay
 8000588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058c:	f000 fe0e 	bl	80011ac <HAL_Delay>
  {
 8000590:	bf00      	nop
 8000592:	e7f5      	b.n	8000580 <main+0x20>

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fc64 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fcfc 	bl	8003018 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 fa77 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f002 ff5d 	bl	8003508 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 fa60 	bl	8000b18 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800066e:	4831      	ldr	r0, [pc, #196]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000670:	f000 ff9c 	bl	80015ac <HAL_CAN_Start>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_CAN1_Init+0x16>
	{
	    Error_Handler();
 800067a:	f000 fa4d 	bl	8000b18 <Error_Handler>
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067e:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000680:	4a2d      	ldr	r2, [pc, #180]	@ (8000738 <MX_CAN1_Init+0xd0>)
 8000682:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000686:	2210      	movs	r2, #16
 8000688:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <MX_CAN1_Init+0xcc>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000696:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <MX_CAN1_Init+0xcc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c6:	481b      	ldr	r0, [pc, #108]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006c8:	f000 fd94 	bl	80011f4 <HAL_CAN_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_CAN1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fa21 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0; // Filter bank number
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; // ID/mask mode
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 80006de:	2301      	movs	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000; // High bits of filter ID
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000; // Low bits of filter ID
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000; // High bits of filter mask
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000; // Low bits of filter mask
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // Assign to FIFO 0
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE; // Activate filter
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006fc:	f000 ff56 	bl	80015ac <HAL_CAN_Start>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_CAN1_Init+0xa2>
    {
        Error_Handler();
 8000706:	f000 fa07 	bl	8000b18 <Error_Handler>
    }
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000710:	f000 fe6c 	bl	80013ec <HAL_CAN_ConfigFilter>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_CAN1_Init+0xb6>
       {
           Error_Handler();
 800071a:	f000 f9fd 	bl	8000b18 <Error_Handler>
       }
    // Start CAN

    while (1)
    {
  	  Send_CAN_Message();
 800071e:	f000 f80d 	bl	800073c <Send_CAN_Message>
  	  Receive_CAN_Message();
 8000722:	f000 f835 	bl	8000790 <Receive_CAN_Message>
  	  HAL_Delay(1000); // 1-second delay
 8000726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072a:	f000 fd3f 	bl	80011ac <HAL_Delay>
    {
 800072e:	bf00      	nop
 8000730:	e7f5      	b.n	800071e <MX_CAN1_Init+0xb6>
 8000732:	bf00      	nop
 8000734:	20000084 	.word	0x20000084
 8000738:	40006400 	.word	0x40006400

0800073c <Send_CAN_Message>:

  /* USER CODE END CAN1_Init 2 */

}
void Send_CAN_Message(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 8000742:	4a11      	ldr	r2, [pc, #68]	@ (8000788 <Send_CAN_Message+0x4c>)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074a:	e883 0003 	stmia.w	r3, {r0, r1}

    TxHeader.DLC = 8;
 800074e:	2308      	movs	r3, #8
 8000750:	623b      	str	r3, [r7, #32]
    TxHeader.StdId = 0x123;
 8000752:	f240 1323 	movw	r3, #291	@ 0x123
 8000756:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0x01;  // Extended CAN ID
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	1d3a      	adds	r2, r7, #4
 800076a:	f107 0110 	add.w	r1, r7, #16
 800076e:	4807      	ldr	r0, [pc, #28]	@ (800078c <Send_CAN_Message+0x50>)
 8000770:	f000 ff60 	bl	8001634 <HAL_CAN_AddTxMessage>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <Send_CAN_Message+0x42>
    {
        Error_Handler();
 800077a:	f000 f9cd 	bl	8000b18 <Error_Handler>
    }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	@ 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	08004ba4 	.word	0x08004ba4
 800078c:	20000084 	.word	0x20000084

08000790 <Receive_CAN_Message>:
void Receive_CAN_Message(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	f107 0208 	add.w	r2, r7, #8
 800079c:	2100      	movs	r1, #0
 800079e:	4812      	ldr	r0, [pc, #72]	@ (80007e8 <Receive_CAN_Message+0x58>)
 80007a0:	f001 f818 	bl	80017d4 <HAL_CAN_GetRxMessage>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d11a      	bne.n	80007e0 <Receive_CAN_Message+0x50>
    {
        printf("Received message: ID=0x%X, DLC=%d, Data=", RxHeader.StdId, RxHeader.DLC);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	4619      	mov	r1, r3
 80007b0:	480e      	ldr	r0, [pc, #56]	@ (80007ec <Receive_CAN_Message+0x5c>)
 80007b2:	f003 fb43 	bl	8003e3c <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ba:	e00a      	b.n	80007d2 <Receive_CAN_Message+0x42>
        {
            printf("%02X ", RxData[i]);
 80007bc:	463a      	mov	r2, r7
 80007be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <Receive_CAN_Message+0x60>)
 80007c8:	f003 fb38 	bl	8003e3c <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 80007cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ce:	3301      	adds	r3, #1
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d8f0      	bhi.n	80007bc <Receive_CAN_Message+0x2c>
        }
        printf("\n");
 80007da:	200a      	movs	r0, #10
 80007dc:	f003 fb40 	bl	8003e60 <putchar>
    }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000084 	.word	0x20000084
 80007ec:	08004bac 	.word	0x08004bac
 80007f0:	08004bd8 	.word	0x08004bd8

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x50>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <MX_I2C1_Init+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_I2C1_Init+0x58>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000832:	f001 fe0d 	bl	8002450 <HAL_I2C_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 f96c 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000ac 	.word	0x200000ac
 8000848:	40005400 	.word	0x40005400
 800084c:	000186a0 	.word	0x000186a0

08000850 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <MX_I2S3_Init+0x5c>)
 800087a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000890:	f001 ff22 	bl	80026d8 <HAL_I2S_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089a:	f000 f93d 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000100 	.word	0x20000100
 80008a8:	40003c00 	.word	0x40003c00
 80008ac:	00017700 	.word	0x00017700

080008b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_SPI1_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_SPI1_Init+0x64>)
 8000902:	f003 f94f 	bl	8003ba4 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 f904 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000148 	.word	0x20000148
 8000918:	40013000 	.word	0x40013000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b72      	ldr	r3, [pc, #456]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a71      	ldr	r2, [pc, #452]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b6f      	ldr	r3, [pc, #444]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b6b      	ldr	r3, [pc, #428]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a6a      	ldr	r2, [pc, #424]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b68      	ldr	r3, [pc, #416]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b64      	ldr	r3, [pc, #400]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a63      	ldr	r2, [pc, #396]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b61      	ldr	r3, [pc, #388]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a5c      	ldr	r2, [pc, #368]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b5a      	ldr	r3, [pc, #360]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b56      	ldr	r3, [pc, #344]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a55      	ldr	r2, [pc, #340]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b53      	ldr	r3, [pc, #332]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a4e      	ldr	r2, [pc, #312]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000b00 <MX_GPIO_Init+0x1e4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4849      	ldr	r0, [pc, #292]	@ (8000b04 <MX_GPIO_Init+0x1e8>)
 80009e0:	f001 fd02 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2101      	movs	r1, #1
 80009e8:	4847      	ldr	r0, [pc, #284]	@ (8000b08 <MX_GPIO_Init+0x1ec>)
 80009ea:	f001 fcfd 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ee:	2200      	movs	r2, #0
 80009f0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009f4:	4845      	ldr	r0, [pc, #276]	@ (8000b0c <MX_GPIO_Init+0x1f0>)
 80009f6:	f001 fcf7 	bl	80023e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009fa:	2308      	movs	r3, #8
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	483c      	ldr	r0, [pc, #240]	@ (8000b04 <MX_GPIO_Init+0x1e8>)
 8000a12:	f001 fb4d 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4836      	ldr	r0, [pc, #216]	@ (8000b08 <MX_GPIO_Init+0x1ec>)
 8000a2e:	f001 fb3f 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a42:	2305      	movs	r3, #5
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482e      	ldr	r0, [pc, #184]	@ (8000b08 <MX_GPIO_Init+0x1ec>)
 8000a4e:	f001 fb2f 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a56:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	482a      	ldr	r0, [pc, #168]	@ (8000b10 <MX_GPIO_Init+0x1f4>)
 8000a68:	f001 fb22 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4825      	ldr	r0, [pc, #148]	@ (8000b14 <MX_GPIO_Init+0x1f8>)
 8000a80:	f001 fb16 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a96:	2305      	movs	r3, #5
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	@ (8000b14 <MX_GPIO_Init+0x1f8>)
 8000aa2:	f001 fb05 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000aaa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <MX_GPIO_Init+0x1f0>)
 8000ac0:	f001 faf6 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_GPIO_Init+0x1f0>)
 8000ad8:	f001 faea 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_GPIO_Init+0x1e8>)
 8000af2:	f001 fadd 	bl	80020b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	@ 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin); // Toggle a red LED to signal error
 8000b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <Error_Handler+0x20>)
 8000b26:	f001 fc78 	bl	800241a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);                    // 500 ms delay
 8000b2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2e:	f000 fb3d 	bl	80011ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin); // Toggle a red LED to signal error
 8000b32:	bf00      	nop
 8000b34:	e7f4      	b.n	8000b20 <Error_Handler+0x8>
 8000b36:	bf00      	nop
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7a:	2007      	movs	r0, #7
 8000b7c:	f001 fa56 	bl	800202c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a25      	ldr	r2, [pc, #148]	@ (8000c40 <HAL_CAN_MspInit+0xb4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d144      	bne.n	8000c38 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <HAL_CAN_MspInit+0xb8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <HAL_CAN_MspInit+0xb8>)
 8000bb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_CAN_MspInit+0xb8>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <HAL_CAN_MspInit+0xb8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c44 <HAL_CAN_MspInit+0xb8>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <HAL_CAN_MspInit+0xb8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000be6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bf8:	2309      	movs	r3, #9
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4811      	ldr	r0, [pc, #68]	@ (8000c48 <HAL_CAN_MspInit+0xbc>)
 8000c04:	f001 fa54 	bl	80020b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2013      	movs	r0, #19
 8000c0e:	f001 fa18 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c12:	2013      	movs	r0, #19
 8000c14:	f001 fa31 	bl	800207a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2014      	movs	r0, #20
 8000c1e:	f001 fa10 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c22:	2014      	movs	r0, #20
 8000c24:	f001 fa29 	bl	800207a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2015      	movs	r0, #21
 8000c2e:	f001 fa08 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c32:	2015      	movs	r0, #21
 8000c34:	f001 fa21 	bl	800207a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40006400 	.word	0x40006400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <HAL_I2C_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12c      	bne.n	8000cc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000ca8:	f001 fa02 	bl	80020b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000cb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	@ 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020400 	.word	0x40020400

08000cdc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a31      	ldr	r2, [pc, #196]	@ (8000dcc <HAL_I2S_MspInit+0xf0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d15a      	bne.n	8000dc2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d10:	23c0      	movs	r3, #192	@ 0xc0
 8000d12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fdff 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d28:	f7ff fef6 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_I2S_MspInit+0xf4>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d80:	2310      	movs	r3, #16
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d90:	2306      	movs	r3, #6
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <HAL_I2S_MspInit+0xf8>)
 8000d9c:	f001 f988 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000da0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db2:	2306      	movs	r3, #6
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <HAL_I2S_MspInit+0xfc>)
 8000dbe:	f001 f977 	bl	80020b0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3738      	adds	r7, #56	@ 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40003c00 	.word	0x40003c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020800 	.word	0x40020800

08000ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <HAL_SPI_MspInit+0x84>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12b      	bne.n	8000e56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e36:	23e0      	movs	r3, #224	@ 0xe0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e46:	2305      	movs	r3, #5
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <HAL_SPI_MspInit+0x8c>)
 8000e52:	f001 f92d 	bl	80020b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40013000 	.word	0x40013000
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <NMI_Handler+0x4>

08000e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <MemManage_Handler+0x4>

08000e84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec2:	f000 f953 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <CAN1_TX_IRQHandler+0x10>)
 8000ed2:	f000 fda1 	bl	8001a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000084 	.word	0x20000084

08000ee0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <CAN1_RX0_IRQHandler+0x10>)
 8000ee6:	f000 fd97 	bl	8001a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000084 	.word	0x20000084

08000ef4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <CAN1_RX1_IRQHandler+0x10>)
 8000efa:	f000 fd8d 	bl	8001a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000084 	.word	0x20000084

08000f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
  }
  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f002 ff34 	bl	8003e80 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20020000 	.word	0x20020000
 8001044:	00000400 	.word	0x00000400
 8001048:	200001a0 	.word	0x200001a0
 800104c:	200002f8 	.word	0x200002f8

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f002 fef3 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fa5b 	bl	8000560 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010b8:	08004c3c 	.word	0x08004c3c
  ldr r2, =_sbss
 80010bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010c0:	200002f4 	.word	0x200002f4

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 ff9b 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fd1e 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ffb3 	bl	8002096 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001148:	f000 ff7b 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	200001a4 	.word	0x200001a4

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200001a4 	.word	0x200001a4

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0ed      	b.n	80013e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fcba 	bl	8000b8c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff ffb4 	bl	8001194 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800122e:	e012      	b.n	8001256 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001230:	f7ff ffb0 	bl	8001194 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d90b      	bls.n	8001256 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0c5      	b.n	80013e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0e5      	beq.n	8001230 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0202 	bic.w	r2, r2, #2
 8001272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001274:	f7ff ff8e 	bl	8001194 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127a:	e012      	b.n	80012a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800127c:	f7ff ff8a 	bl	8001194 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b0a      	cmp	r3, #10
 8001288:	d90b      	bls.n	80012a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2205      	movs	r2, #5
 800129a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e09f      	b.n	80013e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e5      	bne.n	800127c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e007      	b.n	80012da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e5b      	ldrb	r3, [r3, #25]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e007      	b.n	8001304 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e9b      	ldrb	r3, [r3, #26]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e007      	b.n	800132e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0220 	bic.w	r2, r2, #32
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7edb      	ldrb	r3, [r3, #27]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0210 	bic.w	r2, r2, #16
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0210 	orr.w	r2, r2, #16
 8001356:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7f1b      	ldrb	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d108      	bne.n	8001372 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0208 	orr.w	r2, r2, #8
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e007      	b.n	8001382 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0208 	bic.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7f5b      	ldrb	r3, [r3, #29]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0204 	orr.w	r2, r2, #4
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e007      	b.n	80013ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0204 	bic.w	r2, r2, #4
 80013aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	ea42 0103 	orr.w	r1, r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001404:	7cfb      	ldrb	r3, [r7, #19]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d003      	beq.n	8001412 <HAL_CAN_ConfigFilter+0x26>
 800140a:	7cfb      	ldrb	r3, [r7, #19]
 800140c:	2b02      	cmp	r3, #2
 800140e:	f040 80be 	bne.w	800158e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001412:	4b65      	ldr	r3, [pc, #404]	@ (80015a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001414:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800142c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	2201      	movs	r2, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d123      	bne.n	80014bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001496:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3248      	adds	r2, #72	@ 0x48
 800149c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	3348      	adds	r3, #72	@ 0x48
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d122      	bne.n	800150a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3248      	adds	r2, #72	@ 0x48
 80014ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001500:	6979      	ldr	r1, [r7, #20]
 8001502:	3348      	adds	r3, #72	@ 0x48
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	401a      	ands	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001524:	e007      	b.n	8001536 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	431a      	orrs	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001550:	e007      	b.n	8001562 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	431a      	orrs	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001580:	f023 0201 	bic.w	r2, r3, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e006      	b.n	800159c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40006400 	.word	0x40006400

080015ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d12e      	bne.n	800161e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fddc 	bl	8001194 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015de:	e012      	b.n	8001606 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e0:	f7ff fdd8 	bl	8001194 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d90b      	bls.n	8001606 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2205      	movs	r2, #5
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e012      	b.n	800162c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1e5      	bne.n	80015e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e006      	b.n	800162c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
  }
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001652:	7ffb      	ldrb	r3, [r7, #31]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <HAL_CAN_AddTxMessage+0x2c>
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	2b02      	cmp	r3, #2
 800165c:	f040 80ad 	bne.w	80017ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10a      	bne.n	8001680 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8095 	beq.w	80017aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	0e1b      	lsrs	r3, r3, #24
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800168a:	2201      	movs	r2, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	6809      	ldr	r1, [r1, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3318      	adds	r3, #24
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	440b      	add	r3, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e00f      	b.n	80016d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3318      	adds	r3, #24
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	440b      	add	r3, r1
 80016d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3318      	adds	r3, #24
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	440b      	add	r3, r1
 80016e8:	3304      	adds	r3, #4
 80016ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	7d1b      	ldrb	r3, [r3, #20]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d111      	bne.n	8001718 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3318      	adds	r3, #24
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	3304      	adds	r3, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	6811      	ldr	r1, [r2, #0]
 8001708:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3318      	adds	r3, #24
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	440b      	add	r3, r1
 8001714:	3304      	adds	r3, #4
 8001716:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3307      	adds	r3, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	061a      	lsls	r2, r3, #24
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3306      	adds	r3, #6
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3305      	adds	r3, #5
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	4313      	orrs	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	3204      	adds	r2, #4
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	4610      	mov	r0, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	6811      	ldr	r1, [r2, #0]
 8001740:	ea43 0200 	orr.w	r2, r3, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	440b      	add	r3, r1
 800174a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800174e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3303      	adds	r3, #3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	061a      	lsls	r2, r3, #24
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3302      	adds	r3, #2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3301      	adds	r3, #1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	4313      	orrs	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	7812      	ldrb	r2, [r2, #0]
 8001770:	4610      	mov	r0, r2
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	6811      	ldr	r1, [r2, #0]
 8001776:	ea43 0200 	orr.w	r2, r3, r0
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	440b      	add	r3, r1
 8001780:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001784:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3318      	adds	r3, #24
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	6811      	ldr	r1, [r2, #0]
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3318      	adds	r3, #24
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	440b      	add	r3, r1
 80017a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e00e      	b.n	80017c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e006      	b.n	80017c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3724      	adds	r7, #36	@ 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d003      	beq.n	80017f8 <HAL_CAN_GetRxMessage+0x24>
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	f040 8103 	bne.w	80019fe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10e      	bne.n	800181c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0f7      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0e8      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	331b      	adds	r3, #27
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0204 	and.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	331b      	adds	r3, #27
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	4413      	add	r3, r2
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0d5b      	lsrs	r3, r3, #21
 8001868:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e00b      	b.n	800188a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	331b      	adds	r3, #27
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	331b      	adds	r3, #27
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0202 	and.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	331b      	adds	r3, #27
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2208      	movs	r2, #8
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	e00b      	b.n	80018d8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	331b      	adds	r3, #27
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	331b      	adds	r3, #27
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	3304      	adds	r3, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	331b      	adds	r3, #27
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	3304      	adds	r3, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0a1a      	lsrs	r2, r3, #8
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0c1a      	lsrs	r2, r3, #16
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3302      	adds	r3, #2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e1a      	lsrs	r2, r3, #24
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3303      	adds	r3, #3
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3304      	adds	r3, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0a1a      	lsrs	r2, r3, #8
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	3305      	adds	r3, #5
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0c1a      	lsrs	r2, r3, #16
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3306      	adds	r3, #6
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0e1a      	lsrs	r2, r3, #24
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3307      	adds	r3, #7
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	e007      	b.n	80019fa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e006      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
  }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d07c      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d023      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f983 	bl	8001d86 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a80:	e016      	b.n	8001ab0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a94:	e00c      	b.n	8001ab0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e002      	b.n	8001ab0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f989 	bl	8001dc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d024      	beq.n	8001b04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ac2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f963 	bl	8001d9a <HAL_CAN_TxMailbox1CompleteCallback>
 8001ad4:	e016      	b.n	8001b04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e00c      	b.n	8001b04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afc:	e002      	b.n	8001b04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f969 	bl	8001dd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d024      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f943 	bl	8001dae <HAL_CAN_TxMailbox2CompleteCallback>
 8001b28:	e016      	b.n	8001b58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3c:	e00c      	b.n	8001b58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	e002      	b.n	8001b58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f949 	bl	8001dea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00c      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f93a 	bl	8001e12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f921 	bl	8001dfe <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00c      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f91c 	bl	8001e3a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f903 	bl	8001e26 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2210      	movs	r2, #16
 8001c3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f906 	bl	8001e4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00b      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8ff 	bl	8001e62 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d07b      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d072      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d043      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03e      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ce6:	2b60      	cmp	r3, #96	@ 0x60
 8001ce8:	d02b      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x32a>
 8001cea:	2b60      	cmp	r3, #96	@ 0x60
 8001cec:	d82e      	bhi.n	8001d4c <HAL_CAN_IRQHandler+0x334>
 8001cee:	2b50      	cmp	r3, #80	@ 0x50
 8001cf0:	d022      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x320>
 8001cf2:	2b50      	cmp	r3, #80	@ 0x50
 8001cf4:	d82a      	bhi.n	8001d4c <HAL_CAN_IRQHandler+0x334>
 8001cf6:	2b40      	cmp	r3, #64	@ 0x40
 8001cf8:	d019      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x316>
 8001cfa:	2b40      	cmp	r3, #64	@ 0x40
 8001cfc:	d826      	bhi.n	8001d4c <HAL_CAN_IRQHandler+0x334>
 8001cfe:	2b30      	cmp	r3, #48	@ 0x30
 8001d00:	d010      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x30c>
 8001d02:	2b30      	cmp	r3, #48	@ 0x30
 8001d04:	d822      	bhi.n	8001d4c <HAL_CAN_IRQHandler+0x334>
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d002      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x2f8>
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d005      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d0e:	e01d      	b.n	8001d4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d18:	e019      	b.n	8001d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d22:	e014      	b.n	8001d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	f043 0320 	orr.w	r3, r3, #32
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d2c:	e00f      	b.n	8001d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d36:	e00a      	b.n	8001d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d40:	e005      	b.n	8001d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d4a:	e000      	b.n	8001d4e <HAL_CAN_IRQHandler+0x336>
            break;
 8001d4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2204      	movs	r2, #4
 8001d64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f87c 	bl	8001e76 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	@ (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff29 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff3e 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff31 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e16b      	b.n	80023a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 815a 	bne.w	800239e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80b4 	beq.w	800239e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_GPIO_Init+0x30c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a5f      	ldr	r2, [pc, #380]	@ (80023bc <HAL_GPIO_Init+0x30c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b5d      	ldr	r3, [pc, #372]	@ (80023bc <HAL_GPIO_Init+0x30c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a5b      	ldr	r2, [pc, #364]	@ (80023c0 <HAL_GPIO_Init+0x310>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a52      	ldr	r2, [pc, #328]	@ (80023c4 <HAL_GPIO_Init+0x314>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a51      	ldr	r2, [pc, #324]	@ (80023c8 <HAL_GPIO_Init+0x318>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x222>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a50      	ldr	r2, [pc, #320]	@ (80023cc <HAL_GPIO_Init+0x31c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x21e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	@ (80023d0 <HAL_GPIO_Init+0x320>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x21a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4e      	ldr	r2, [pc, #312]	@ (80023d4 <HAL_GPIO_Init+0x324>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x216>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	@ (80023d8 <HAL_GPIO_Init+0x328>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <HAL_GPIO_Init+0x32c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	@ (80023e0 <HAL_GPIO_Init+0x330>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x20a>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e00e      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e00c      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00a      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4935      	ldr	r1, [pc, #212]	@ (80023c0 <HAL_GPIO_Init+0x310>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f6:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231a:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002320:	4b30      	ldr	r3, [pc, #192]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002344:	4a27      	ldr	r2, [pc, #156]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234a:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002398:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <HAL_GPIO_Init+0x334>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f ae90 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40021c00 	.word	0x40021c00
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	041a      	lsls	r2, r3, #16
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43d9      	mvns	r1, r3
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e12b      	b.n	80026ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fbe8 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b4:	f001 fa20 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 80024b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a81      	ldr	r2, [pc, #516]	@ (80026c4 <HAL_I2C_Init+0x274>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d807      	bhi.n	80024d4 <HAL_I2C_Init+0x84>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a80      	ldr	r2, [pc, #512]	@ (80026c8 <HAL_I2C_Init+0x278>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e006      	b.n	80024e2 <HAL_I2C_Init+0x92>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a7d      	ldr	r2, [pc, #500]	@ (80026cc <HAL_I2C_Init+0x27c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	bf94      	ite	ls
 80024dc:	2301      	movls	r3, #1
 80024de:	2300      	movhi	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0e7      	b.n	80026ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a78      	ldr	r2, [pc, #480]	@ (80026d0 <HAL_I2C_Init+0x280>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0c9b      	lsrs	r3, r3, #18
 80024f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a6a      	ldr	r2, [pc, #424]	@ (80026c4 <HAL_I2C_Init+0x274>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d802      	bhi.n	8002524 <HAL_I2C_Init+0xd4>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3301      	adds	r3, #1
 8002522:	e009      	b.n	8002538 <HAL_I2C_Init+0xe8>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	4a69      	ldr	r2, [pc, #420]	@ (80026d4 <HAL_I2C_Init+0x284>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	3301      	adds	r3, #1
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800254a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	495c      	ldr	r1, [pc, #368]	@ (80026c4 <HAL_I2C_Init+0x274>)
 8002554:	428b      	cmp	r3, r1
 8002556:	d819      	bhi.n	800258c <HAL_I2C_Init+0x13c>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e59      	subs	r1, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fbb1 f3f3 	udiv	r3, r1, r3
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800256c:	400b      	ands	r3, r1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_I2C_Init+0x138>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e59      	subs	r1, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002586:	e051      	b.n	800262c <HAL_I2C_Init+0x1dc>
 8002588:	2304      	movs	r3, #4
 800258a:	e04f      	b.n	800262c <HAL_I2C_Init+0x1dc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_I2C_Init+0x168>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e012      	b.n	80025de <HAL_I2C_Init+0x18e>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x196>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e022      	b.n	800262c <HAL_I2C_Init+0x1dc>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <HAL_I2C_Init+0x1bc>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e58      	subs	r0, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800260a:	e00f      	b.n	800262c <HAL_I2C_Init+0x1dc>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	6809      	ldr	r1, [r1, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800265a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6911      	ldr	r1, [r2, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	000186a0 	.word	0x000186a0
 80026c8:	001e847f 	.word	0x001e847f
 80026cc:	003d08ff 	.word	0x003d08ff
 80026d0:	431bde83 	.word	0x431bde83
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e128      	b.n	800293c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a90      	ldr	r2, [pc, #576]	@ (8002944 <HAL_I2S_Init+0x26c>)
 8002702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7fe fae9 	bl	8000cdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002720:	f023 030f 	bic.w	r3, r3, #15
 8002724:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d060      	beq.n	80027f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800273e:	2310      	movs	r3, #16
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e001      	b.n	8002748 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b20      	cmp	r3, #32
 800274e:	d802      	bhi.n	8002756 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002756:	2001      	movs	r0, #1
 8002758:	f001 f9c4 	bl	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq>
 800275c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002766:	d125      	bne.n	80027b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	fbb2 f2f3 	udiv	r2, r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	3305      	adds	r3, #5
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e01f      	b.n	80027d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	3305      	adds	r3, #5
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e00e      	b.n	80027d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	3305      	adds	r3, #5
 80027d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002948 <HAL_I2S_Init+0x270>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	08db      	lsrs	r3, r3, #3
 80027dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e003      	b.n	8002800 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d902      	bls.n	800280c <HAL_I2S_Init+0x134>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2bff      	cmp	r3, #255	@ 0xff
 800280a:	d907      	bls.n	800281c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	f043 0210 	orr.w	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e08f      	b.n	800293c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	ea42 0103 	orr.w	r1, r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	430a      	orrs	r2, r1
 800282e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800283a:	f023 030f 	bic.w	r3, r3, #15
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6851      	ldr	r1, [r2, #4]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6892      	ldr	r2, [r2, #8]
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68d2      	ldr	r2, [r2, #12]
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6992      	ldr	r2, [r2, #24]
 8002852:	430a      	orrs	r2, r1
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800285e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d161      	bne.n	800292c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a38      	ldr	r2, [pc, #224]	@ (800294c <HAL_I2S_Init+0x274>)
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a37      	ldr	r2, [pc, #220]	@ (8002950 <HAL_I2S_Init+0x278>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_I2S_Init+0x1a4>
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_I2S_Init+0x27c>)
 800287a:	e001      	b.n	8002880 <HAL_I2S_Init+0x1a8>
 800287c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4932      	ldr	r1, [pc, #200]	@ (8002950 <HAL_I2S_Init+0x278>)
 8002888:	428a      	cmp	r2, r1
 800288a:	d101      	bne.n	8002890 <HAL_I2S_Init+0x1b8>
 800288c:	4a31      	ldr	r2, [pc, #196]	@ (8002954 <HAL_I2S_Init+0x27c>)
 800288e:	e001      	b.n	8002894 <HAL_I2S_Init+0x1bc>
 8002890:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002894:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002898:	f023 030f 	bic.w	r3, r3, #15
 800289c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002950 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x1d4>
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x1d8>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028b0:	2202      	movs	r2, #2
 80028b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a25      	ldr	r2, [pc, #148]	@ (8002950 <HAL_I2S_Init+0x278>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_I2S_Init+0x1ea>
 80028be:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <HAL_I2S_Init+0x27c>)
 80028c0:	e001      	b.n	80028c6 <HAL_I2S_Init+0x1ee>
 80028c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028d2:	d003      	beq.n	80028dc <HAL_I2S_Init+0x204>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80028dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e001      	b.n	80028e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002906:	4313      	orrs	r3, r2
 8002908:	b29a      	uxth	r2, r3
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	4313      	orrs	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002914:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <HAL_I2S_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_I2S_Init+0x24c>
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <HAL_I2S_Init+0x27c>)
 8002922:	e001      	b.n	8002928 <HAL_I2S_Init+0x250>
 8002924:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002928:	897a      	ldrh	r2, [r7, #10]
 800292a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	08002a4f 	.word	0x08002a4f
 8002948:	cccccccd 	.word	0xcccccccd
 800294c:	08002b65 	.word	0x08002b65
 8002950:	40003800 	.word	0x40003800
 8002954:	40003400 	.word	0x40003400

08002958 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffb8 	bl	8002958 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	b292      	uxth	r2, r2
 8002a04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	1c9a      	adds	r2, r3, #2
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10e      	bne.n	8002a46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff93 	bl	800296c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d13a      	bne.n	8002ae0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d109      	bne.n	8002a88 <I2S_IRQHandler+0x3a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b40      	cmp	r3, #64	@ 0x40
 8002a80:	d102      	bne.n	8002a88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb4 	bl	80029f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8e:	2b40      	cmp	r3, #64	@ 0x40
 8002a90:	d126      	bne.n	8002ae0 <I2S_IRQHandler+0x92>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d11f      	bne.n	8002ae0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002aae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff50 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d136      	bne.n	8002b5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d109      	bne.n	8002b0a <I2S_IRQHandler+0xbc>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b00:	2b80      	cmp	r3, #128	@ 0x80
 8002b02:	d102      	bne.n	8002b0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff45 	bl	8002994 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d122      	bne.n	8002b5a <I2S_IRQHandler+0x10c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d11b      	bne.n	8002b5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff13 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a92      	ldr	r2, [pc, #584]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b7e:	4b92      	ldr	r3, [pc, #584]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b80:	e001      	b.n	8002b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a8b      	ldr	r2, [pc, #556]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b9e:	e001      	b.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ba0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bb0:	d004      	beq.n	8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8099 	bne.w	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f925 	bl	8002e20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9c8 	bl	8002f80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	d13a      	bne.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d035      	beq.n	8002c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c10:	e001      	b.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4969      	ldr	r1, [pc, #420]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c1e:	428b      	cmp	r3, r1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c22:	4b69      	ldr	r3, [pc, #420]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c24:	e001      	b.n	8002c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fe88 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	f040 80c3 	bne.w	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80bd 	beq.w	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a49      	ldr	r2, [pc, #292]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ca2:	4b49      	ldr	r3, [pc, #292]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca4:	e001      	b.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ca6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4944      	ldr	r1, [pc, #272]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb2:	428b      	cmp	r3, r1
 8002cb4:	d101      	bne.n	8002cba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cb8:	e001      	b.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe4a 	bl	8002980 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cec:	e089      	b.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8be 	bl	8002e84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f8fd 	bl	8002f1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d12f      	bne.n	8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02a      	beq.n	8002d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d50:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d52:	e001      	b.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4919      	ldr	r1, [pc, #100]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d60:	428b      	cmp	r3, r1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d64:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d66:	e001      	b.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fdfa 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d136      	bne.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d031      	beq.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dac:	e001      	b.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4902      	ldr	r1, [pc, #8]	@ (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dba:	428b      	cmp	r3, r1
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002dbe:	4b02      	ldr	r3, [pc, #8]	@ (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dc0:	e006      	b.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002dc2:	bf00      	nop
 8002dc4:	40003800 	.word	0x40003800
 8002dc8:	40003400 	.word	0x40003400
 8002dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002dd4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002de4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f043 0204 	orr.w	r2, r3, #4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fdc0 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e00:	e000      	b.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e02:	bf00      	nop
}
 8002e04:	bf00      	nop
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	1c99      	adds	r1, r3, #2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6251      	str	r1, [r2, #36]	@ 0x24
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d113      	bne.n	8002e7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffc9 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	1c99      	adds	r1, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6251      	str	r1, [r2, #36]	@ 0x24
 8002e96:	8819      	ldrh	r1, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <I2SEx_TxISR_I2SExt+0x90>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <I2SEx_TxISR_I2SExt+0x22>
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ea4:	e001      	b.n	8002eaa <I2SEx_TxISR_I2SExt+0x26>
 8002ea6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eaa:	460a      	mov	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d121      	bne.n	8002f0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <I2SEx_TxISR_I2SExt+0x90>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <I2SEx_TxISR_I2SExt+0x50>
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ed2:	e001      	b.n	8002ed8 <I2SEx_TxISR_I2SExt+0x54>
 8002ed4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	490d      	ldr	r1, [pc, #52]	@ (8002f14 <I2SEx_TxISR_I2SExt+0x90>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d101      	bne.n	8002ee8 <I2SEx_TxISR_I2SExt+0x64>
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ee6:	e001      	b.n	8002eec <I2SEx_TxISR_I2SExt+0x68>
 8002ee8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ef0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff81 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40003800 	.word	0x40003800
 8002f18:	40003400 	.word	0x40003400

08002f1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68d8      	ldr	r0, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	1c99      	adds	r1, r3, #2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002f34:	b282      	uxth	r2, r0
 8002f36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d113      	bne.n	8002f78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4a 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	@ (8003010 <I2SEx_RxISR_I2SExt+0x90>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <I2SEx_RxISR_I2SExt+0x16>
 8002f92:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <I2SEx_RxISR_I2SExt+0x94>)
 8002f94:	e001      	b.n	8002f9a <I2SEx_RxISR_I2SExt+0x1a>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	1c99      	adds	r1, r3, #2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002fa6:	b282      	uxth	r2, r0
 8002fa8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d121      	bne.n	8003006 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <I2SEx_RxISR_I2SExt+0x90>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <I2SEx_RxISR_I2SExt+0x50>
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <I2SEx_RxISR_I2SExt+0x94>)
 8002fce:	e001      	b.n	8002fd4 <I2SEx_RxISR_I2SExt+0x54>
 8002fd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	490d      	ldr	r1, [pc, #52]	@ (8003010 <I2SEx_RxISR_I2SExt+0x90>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d101      	bne.n	8002fe4 <I2SEx_RxISR_I2SExt+0x64>
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <I2SEx_RxISR_I2SExt+0x94>)
 8002fe2:	e001      	b.n	8002fe8 <I2SEx_RxISR_I2SExt+0x68>
 8002fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff03 	bl	8002e0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40003800 	.word	0x40003800
 8003014:	40003400 	.word	0x40003400

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e267      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b85      	ldr	r3, [pc, #532]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b82      	ldr	r3, [pc, #520]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b7e      	ldr	r3, [pc, #504]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e242      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6f      	ldr	r2, [pc, #444]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a68      	ldr	r2, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f860 	bl	8001194 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe f85c 	bl	8001194 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e207      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe f84c 	bl	8001194 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe f848 	bl	8001194 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f3      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c7      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x244>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe f801 	bl	8001194 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7fd fffd 	bl	8001194 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a8      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_OscConfig+0x244>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd ffe0 	bl	8001194 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd ffdc 	bl	8001194 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e187      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_RCC_OscConfig+0x248>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd ffc0 	bl	8001194 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd ffbc 	bl	8001194 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e167      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x248>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fd ffa9 	bl	8001194 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7fd ffa5 	bl	8001194 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e150      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b88      	ldr	r3, [pc, #544]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b81      	ldr	r3, [pc, #516]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7d      	ldr	r3, [pc, #500]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a7c      	ldr	r2, [pc, #496]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b7a      	ldr	r3, [pc, #488]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b77      	ldr	r3, [pc, #476]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b74      	ldr	r3, [pc, #464]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fd ff65 	bl	8001194 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fd ff61 	bl	8001194 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e10c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ea>
 80032f4:	4b64      	ldr	r3, [pc, #400]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a63      	ldr	r2, [pc, #396]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x30c>
 800330a:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a5e      	ldr	r2, [pc, #376]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b5c      	ldr	r3, [pc, #368]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a5b      	ldr	r2, [pc, #364]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003324:	4b58      	ldr	r3, [pc, #352]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a57      	ldr	r2, [pc, #348]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	4b55      	ldr	r3, [pc, #340]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a54      	ldr	r2, [pc, #336]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd ff26 	bl	8001194 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd ff22 	bl	8001194 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0cb      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x334>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fd ff10 	bl	8001194 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd ff0c 	bl	8001194 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b5      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4a38      	ldr	r2, [pc, #224]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a1 	beq.w	80034f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d05c      	beq.n	800347c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d141      	bne.n	800344e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd fee0 	bl	8001194 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fedc 	bl	8001194 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e087      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	491b      	ldr	r1, [pc, #108]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fd feb5 	bl	8001194 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd feb1 	bl	8001194 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e05c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x416>
 800344c:	e054      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd fe9e 	bl	8001194 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd fe9a 	bl	8001194 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e045      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x444>
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e038      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
 8003490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d121      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11a      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fd fdcc 	bl	8001194 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fd fdc8 	bl	8001194 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fd2c 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08004be0 	.word	0x08004be0
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b094      	sub	sp, #80	@ 0x50
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b79      	ldr	r3, [pc, #484]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80e1 	bhi.w	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e0db      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b73      	ldr	r3, [pc, #460]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800370c:	e0db      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b73      	ldr	r3, [pc, #460]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003710:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003712:	e0d8      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b6f      	ldr	r3, [pc, #444]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800371c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b6d      	ldr	r3, [pc, #436]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003734:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
 8003742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	0159      	lsls	r1, r3, #5
 8003754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003758:	0150      	lsls	r0, r2, #5
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4621      	mov	r1, r4
 8003760:	1a51      	subs	r1, r2, r1
 8003762:	6139      	str	r1, [r7, #16]
 8003764:	4629      	mov	r1, r5
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003778:	4659      	mov	r1, fp
 800377a:	018b      	lsls	r3, r1, #6
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003782:	4651      	mov	r1, sl
 8003784:	018a      	lsls	r2, r1, #6
 8003786:	4651      	mov	r1, sl
 8003788:	ebb2 0801 	subs.w	r8, r2, r1
 800378c:	4659      	mov	r1, fp
 800378e:	eb63 0901 	sbc.w	r9, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb18 0303 	adds.w	r3, r8, r3
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	462b      	mov	r3, r5
 80037b4:	eb49 0303 	adc.w	r3, r9, r3
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037c6:	4629      	mov	r1, r5
 80037c8:	024b      	lsls	r3, r1, #9
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d0:	4621      	mov	r1, r4
 80037d2:	024a      	lsls	r2, r1, #9
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037e4:	f7fc fd44 	bl	8000270 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f0:	e058      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b38      	ldr	r3, [pc, #224]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	4611      	mov	r1, r2
 80037fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	f04f 0000 	mov.w	r0, #0
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	0159      	lsls	r1, r3, #5
 800381a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381e:	0150      	lsls	r0, r2, #5
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4641      	mov	r1, r8
 8003826:	ebb2 0a01 	subs.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800383c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003844:	ebb2 040a 	subs.w	r4, r2, sl
 8003848:	eb63 050b 	sbc.w	r5, r3, fp
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	4643      	mov	r3, r8
 8003862:	18e3      	adds	r3, r4, r3
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	464b      	mov	r3, r9
 8003868:	eb45 0303 	adc.w	r3, r5, r3
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388e:	2200      	movs	r2, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	61fa      	str	r2, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	f7fc fcea 	bl	8000270 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3750      	adds	r7, #80	@ 0x50
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	007a1200 	.word	0x007a1200

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	@ (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08004bf0 	.word	0x08004bf0

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003944:	2b00      	cmp	r3, #0
 8003946:	d035      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003948:	4b62      	ldr	r3, [pc, #392]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800394e:	f7fd fc21 	bl	8001194 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003956:	f7fd fc1d 	bl	8001194 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0b0      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003968:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	019a      	lsls	r2, r3, #6
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	071b      	lsls	r3, r3, #28
 8003980:	4955      	ldr	r1, [pc, #340]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003988:	4b52      	ldr	r3, [pc, #328]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800398e:	f7fd fc01 	bl	8001194 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003996:	f7fd fbfd 	bl	8001194 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e090      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8083 	beq.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b44      	ldr	r3, [pc, #272]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	4a43      	ldr	r2, [pc, #268]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d2:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039de:	4b3f      	ldr	r3, [pc, #252]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a3e      	ldr	r2, [pc, #248]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ea:	f7fd fbd3 	bl	8001194 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd fbcf 	bl	8001194 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e062      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a04:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a10:	4b31      	ldr	r3, [pc, #196]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02f      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d028      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a38:	4b29      	ldr	r3, [pc, #164]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a44:	4a24      	ldr	r2, [pc, #144]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d114      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fb9d 	bl	8001194 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fb99 	bl	8001194 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e02a      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b18      	ldr	r3, [pc, #96]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a8c:	d10d      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	490d      	ldr	r1, [pc, #52]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ab4:	6093      	str	r3, [r2, #8]
 8003ab6:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	4905      	ldr	r1, [pc, #20]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	42470068 	.word	0x42470068
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	42470e40 	.word	0x42470e40

08003ae4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d13f      	bne.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b02:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b18:	d12f      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b1c:	617b      	str	r3, [r7, #20]
          break;
 8003b1e:	e02f      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b20:	4b1c      	ldr	r3, [pc, #112]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b2e:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b36:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e007      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b40:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b48:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b6a:	0f1b      	lsrs	r3, r3, #28
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	617b      	str	r3, [r7, #20]
          break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
          break;
 8003b7e:	bf00      	nop
        }
      }
      break;
 8003b80:	e000      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003b82:	bf00      	nop
    }
  }
  return frequency;
 8003b84:	697b      	ldr	r3, [r7, #20]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00bb8000 	.word	0x00bb8000
 8003b9c:	007a1200 	.word	0x007a1200
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e07b      	b.n	8003cae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bc6:	d009      	beq.n	8003bdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
 8003bce:	e005      	b.n	8003bdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd f8f0 	bl	8000ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c60:	ea42 0103 	orr.w	r1, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0104 	and.w	r1, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	f003 0210 	and.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <std>:
 8003cb8:	2300      	movs	r3, #0
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cc6:	6083      	str	r3, [r0, #8]
 8003cc8:	8181      	strh	r1, [r0, #12]
 8003cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ccc:	81c2      	strh	r2, [r0, #14]
 8003cce:	6183      	str	r3, [r0, #24]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	305c      	adds	r0, #92	@ 0x5c
 8003cd6:	f000 f8cb 	bl	8003e70 <memset>
 8003cda:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <std+0x58>)
 8003cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <std+0x5c>)
 8003ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <std+0x60>)
 8003ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <std+0x64>)
 8003ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <std+0x68>)
 8003cec:	6224      	str	r4, [r4, #32]
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d006      	beq.n	8003d00 <std+0x48>
 8003cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cf6:	4294      	cmp	r4, r2
 8003cf8:	d002      	beq.n	8003d00 <std+0x48>
 8003cfa:	33d0      	adds	r3, #208	@ 0xd0
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d105      	bne.n	8003d0c <std+0x54>
 8003d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d08:	f000 b8e4 	b.w	8003ed4 <__retarget_lock_init_recursive>
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	0800472d 	.word	0x0800472d
 8003d14:	0800474f 	.word	0x0800474f
 8003d18:	08004787 	.word	0x08004787
 8003d1c:	080047ab 	.word	0x080047ab
 8003d20:	200001a8 	.word	0x200001a8

08003d24 <stdio_exit_handler>:
 8003d24:	4a02      	ldr	r2, [pc, #8]	@ (8003d30 <stdio_exit_handler+0xc>)
 8003d26:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <stdio_exit_handler+0x10>)
 8003d28:	4803      	ldr	r0, [pc, #12]	@ (8003d38 <stdio_exit_handler+0x14>)
 8003d2a:	f000 b869 	b.w	8003e00 <_fwalk_sglue>
 8003d2e:	bf00      	nop
 8003d30:	2000000c 	.word	0x2000000c
 8003d34:	080046c5 	.word	0x080046c5
 8003d38:	2000001c 	.word	0x2000001c

08003d3c <cleanup_stdio>:
 8003d3c:	6841      	ldr	r1, [r0, #4]
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <cleanup_stdio+0x34>)
 8003d40:	4299      	cmp	r1, r3
 8003d42:	b510      	push	{r4, lr}
 8003d44:	4604      	mov	r4, r0
 8003d46:	d001      	beq.n	8003d4c <cleanup_stdio+0x10>
 8003d48:	f000 fcbc 	bl	80046c4 <_fflush_r>
 8003d4c:	68a1      	ldr	r1, [r4, #8]
 8003d4e:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <cleanup_stdio+0x38>)
 8003d50:	4299      	cmp	r1, r3
 8003d52:	d002      	beq.n	8003d5a <cleanup_stdio+0x1e>
 8003d54:	4620      	mov	r0, r4
 8003d56:	f000 fcb5 	bl	80046c4 <_fflush_r>
 8003d5a:	68e1      	ldr	r1, [r4, #12]
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <cleanup_stdio+0x3c>)
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	d004      	beq.n	8003d6c <cleanup_stdio+0x30>
 8003d62:	4620      	mov	r0, r4
 8003d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d68:	f000 bcac 	b.w	80046c4 <_fflush_r>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	bf00      	nop
 8003d70:	200001a8 	.word	0x200001a8
 8003d74:	20000210 	.word	0x20000210
 8003d78:	20000278 	.word	0x20000278

08003d7c <global_stdio_init.part.0>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <global_stdio_init.part.0+0x30>)
 8003d80:	4c0b      	ldr	r4, [pc, #44]	@ (8003db0 <global_stdio_init.part.0+0x34>)
 8003d82:	4a0c      	ldr	r2, [pc, #48]	@ (8003db4 <global_stdio_init.part.0+0x38>)
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	4620      	mov	r0, r4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	f7ff ff94 	bl	8003cb8 <std>
 8003d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d94:	2201      	movs	r2, #1
 8003d96:	2109      	movs	r1, #9
 8003d98:	f7ff ff8e 	bl	8003cb8 <std>
 8003d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003da0:	2202      	movs	r2, #2
 8003da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da6:	2112      	movs	r1, #18
 8003da8:	f7ff bf86 	b.w	8003cb8 <std>
 8003dac:	200002e0 	.word	0x200002e0
 8003db0:	200001a8 	.word	0x200001a8
 8003db4:	08003d25 	.word	0x08003d25

08003db8 <__sfp_lock_acquire>:
 8003db8:	4801      	ldr	r0, [pc, #4]	@ (8003dc0 <__sfp_lock_acquire+0x8>)
 8003dba:	f000 b88c 	b.w	8003ed6 <__retarget_lock_acquire_recursive>
 8003dbe:	bf00      	nop
 8003dc0:	200002e5 	.word	0x200002e5

08003dc4 <__sfp_lock_release>:
 8003dc4:	4801      	ldr	r0, [pc, #4]	@ (8003dcc <__sfp_lock_release+0x8>)
 8003dc6:	f000 b887 	b.w	8003ed8 <__retarget_lock_release_recursive>
 8003dca:	bf00      	nop
 8003dcc:	200002e5 	.word	0x200002e5

08003dd0 <__sinit>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f7ff fff0 	bl	8003db8 <__sfp_lock_acquire>
 8003dd8:	6a23      	ldr	r3, [r4, #32]
 8003dda:	b11b      	cbz	r3, 8003de4 <__sinit+0x14>
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	f7ff bff0 	b.w	8003dc4 <__sfp_lock_release>
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <__sinit+0x28>)
 8003de6:	6223      	str	r3, [r4, #32]
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <__sinit+0x2c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f5      	bne.n	8003ddc <__sinit+0xc>
 8003df0:	f7ff ffc4 	bl	8003d7c <global_stdio_init.part.0>
 8003df4:	e7f2      	b.n	8003ddc <__sinit+0xc>
 8003df6:	bf00      	nop
 8003df8:	08003d3d 	.word	0x08003d3d
 8003dfc:	200002e0 	.word	0x200002e0

08003e00 <_fwalk_sglue>:
 8003e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e04:	4607      	mov	r7, r0
 8003e06:	4688      	mov	r8, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e10:	f1b9 0901 	subs.w	r9, r9, #1
 8003e14:	d505      	bpl.n	8003e22 <_fwalk_sglue+0x22>
 8003e16:	6824      	ldr	r4, [r4, #0]
 8003e18:	2c00      	cmp	r4, #0
 8003e1a:	d1f7      	bne.n	8003e0c <_fwalk_sglue+0xc>
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e22:	89ab      	ldrh	r3, [r5, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d907      	bls.n	8003e38 <_fwalk_sglue+0x38>
 8003e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	d003      	beq.n	8003e38 <_fwalk_sglue+0x38>
 8003e30:	4629      	mov	r1, r5
 8003e32:	4638      	mov	r0, r7
 8003e34:	47c0      	blx	r8
 8003e36:	4306      	orrs	r6, r0
 8003e38:	3568      	adds	r5, #104	@ 0x68
 8003e3a:	e7e9      	b.n	8003e10 <_fwalk_sglue+0x10>

08003e3c <iprintf>:
 8003e3c:	b40f      	push	{r0, r1, r2, r3}
 8003e3e:	b507      	push	{r0, r1, r2, lr}
 8003e40:	4906      	ldr	r1, [pc, #24]	@ (8003e5c <iprintf+0x20>)
 8003e42:	ab04      	add	r3, sp, #16
 8003e44:	6808      	ldr	r0, [r1, #0]
 8003e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e4a:	6881      	ldr	r1, [r0, #8]
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	f000 f86d 	bl	8003f2c <_vfiprintf_r>
 8003e52:	b003      	add	sp, #12
 8003e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e58:	b004      	add	sp, #16
 8003e5a:	4770      	bx	lr
 8003e5c:	20000018 	.word	0x20000018

08003e60 <putchar>:
 8003e60:	4b02      	ldr	r3, [pc, #8]	@ (8003e6c <putchar+0xc>)
 8003e62:	4601      	mov	r1, r0
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	6882      	ldr	r2, [r0, #8]
 8003e68:	f000 bd9a 	b.w	80049a0 <_putc_r>
 8003e6c:	20000018 	.word	0x20000018

08003e70 <memset>:
 8003e70:	4402      	add	r2, r0
 8003e72:	4603      	mov	r3, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	@ (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000018 	.word	0x20000018

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ec4 <__libc_init_array+0x38>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	@ (8003ec8 <__libc_init_array+0x3c>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	2600      	movs	r6, #0
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003ecc <__libc_init_array+0x40>)
 8003e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ed0 <__libc_init_array+0x44>)
 8003ea0:	f000 fe74 	bl	8004b8c <_init>
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08004c34 	.word	0x08004c34
 8003ec8:	08004c34 	.word	0x08004c34
 8003ecc:	08004c34 	.word	0x08004c34
 8003ed0:	08004c38 	.word	0x08004c38

08003ed4 <__retarget_lock_init_recursive>:
 8003ed4:	4770      	bx	lr

08003ed6 <__retarget_lock_acquire_recursive>:
 8003ed6:	4770      	bx	lr

08003ed8 <__retarget_lock_release_recursive>:
 8003ed8:	4770      	bx	lr

08003eda <__sfputc_r>:
 8003eda:	6893      	ldr	r3, [r2, #8]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	b410      	push	{r4}
 8003ee2:	6093      	str	r3, [r2, #8]
 8003ee4:	da08      	bge.n	8003ef8 <__sfputc_r+0x1e>
 8003ee6:	6994      	ldr	r4, [r2, #24]
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	db01      	blt.n	8003ef0 <__sfputc_r+0x16>
 8003eec:	290a      	cmp	r1, #10
 8003eee:	d103      	bne.n	8003ef8 <__sfputc_r+0x1e>
 8003ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef4:	f000 bc5d 	b.w	80047b2 <__swbuf_r>
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	1c58      	adds	r0, r3, #1
 8003efc:	6010      	str	r0, [r2, #0]
 8003efe:	7019      	strb	r1, [r3, #0]
 8003f00:	4608      	mov	r0, r1
 8003f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <__sfputs_r>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	460f      	mov	r7, r1
 8003f0e:	4614      	mov	r4, r2
 8003f10:	18d5      	adds	r5, r2, r3
 8003f12:	42ac      	cmp	r4, r5
 8003f14:	d101      	bne.n	8003f1a <__sfputs_r+0x12>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e007      	b.n	8003f2a <__sfputs_r+0x22>
 8003f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1e:	463a      	mov	r2, r7
 8003f20:	4630      	mov	r0, r6
 8003f22:	f7ff ffda 	bl	8003eda <__sfputc_r>
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d1f3      	bne.n	8003f12 <__sfputs_r+0xa>
 8003f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f2c <_vfiprintf_r>:
 8003f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	460d      	mov	r5, r1
 8003f32:	b09d      	sub	sp, #116	@ 0x74
 8003f34:	4614      	mov	r4, r2
 8003f36:	4698      	mov	r8, r3
 8003f38:	4606      	mov	r6, r0
 8003f3a:	b118      	cbz	r0, 8003f44 <_vfiprintf_r+0x18>
 8003f3c:	6a03      	ldr	r3, [r0, #32]
 8003f3e:	b90b      	cbnz	r3, 8003f44 <_vfiprintf_r+0x18>
 8003f40:	f7ff ff46 	bl	8003dd0 <__sinit>
 8003f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f46:	07d9      	lsls	r1, r3, #31
 8003f48:	d405      	bmi.n	8003f56 <_vfiprintf_r+0x2a>
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	059a      	lsls	r2, r3, #22
 8003f4e:	d402      	bmi.n	8003f56 <_vfiprintf_r+0x2a>
 8003f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f52:	f7ff ffc0 	bl	8003ed6 <__retarget_lock_acquire_recursive>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	071b      	lsls	r3, r3, #28
 8003f5a:	d501      	bpl.n	8003f60 <_vfiprintf_r+0x34>
 8003f5c:	692b      	ldr	r3, [r5, #16]
 8003f5e:	b99b      	cbnz	r3, 8003f88 <_vfiprintf_r+0x5c>
 8003f60:	4629      	mov	r1, r5
 8003f62:	4630      	mov	r0, r6
 8003f64:	f000 fc64 	bl	8004830 <__swsetup_r>
 8003f68:	b170      	cbz	r0, 8003f88 <_vfiprintf_r+0x5c>
 8003f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f6c:	07dc      	lsls	r4, r3, #31
 8003f6e:	d504      	bpl.n	8003f7a <_vfiprintf_r+0x4e>
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f74:	b01d      	add	sp, #116	@ 0x74
 8003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7a:	89ab      	ldrh	r3, [r5, #12]
 8003f7c:	0598      	lsls	r0, r3, #22
 8003f7e:	d4f7      	bmi.n	8003f70 <_vfiprintf_r+0x44>
 8003f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f82:	f7ff ffa9 	bl	8003ed8 <__retarget_lock_release_recursive>
 8003f86:	e7f3      	b.n	8003f70 <_vfiprintf_r+0x44>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f96:	2330      	movs	r3, #48	@ 0x30
 8003f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004148 <_vfiprintf_r+0x21c>
 8003f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fa0:	f04f 0901 	mov.w	r9, #1
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	469a      	mov	sl, r3
 8003fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fac:	b10a      	cbz	r2, 8003fb2 <_vfiprintf_r+0x86>
 8003fae:	2a25      	cmp	r2, #37	@ 0x25
 8003fb0:	d1f9      	bne.n	8003fa6 <_vfiprintf_r+0x7a>
 8003fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb6:	d00b      	beq.n	8003fd0 <_vfiprintf_r+0xa4>
 8003fb8:	465b      	mov	r3, fp
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f7ff ffa2 	bl	8003f08 <__sfputs_r>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	f000 80a7 	beq.w	8004118 <_vfiprintf_r+0x1ec>
 8003fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fcc:	445a      	add	r2, fp
 8003fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 809f 	beq.w	8004118 <_vfiprintf_r+0x1ec>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fe4:	f10a 0a01 	add.w	sl, sl, #1
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	9307      	str	r3, [sp, #28]
 8003fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ff2:	4654      	mov	r4, sl
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ffa:	4853      	ldr	r0, [pc, #332]	@ (8004148 <_vfiprintf_r+0x21c>)
 8003ffc:	f7fc f8e8 	bl	80001d0 <memchr>
 8004000:	9a04      	ldr	r2, [sp, #16]
 8004002:	b9d8      	cbnz	r0, 800403c <_vfiprintf_r+0x110>
 8004004:	06d1      	lsls	r1, r2, #27
 8004006:	bf44      	itt	mi
 8004008:	2320      	movmi	r3, #32
 800400a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800400e:	0713      	lsls	r3, r2, #28
 8004010:	bf44      	itt	mi
 8004012:	232b      	movmi	r3, #43	@ 0x2b
 8004014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004018:	f89a 3000 	ldrb.w	r3, [sl]
 800401c:	2b2a      	cmp	r3, #42	@ 0x2a
 800401e:	d015      	beq.n	800404c <_vfiprintf_r+0x120>
 8004020:	9a07      	ldr	r2, [sp, #28]
 8004022:	4654      	mov	r4, sl
 8004024:	2000      	movs	r0, #0
 8004026:	f04f 0c0a 	mov.w	ip, #10
 800402a:	4621      	mov	r1, r4
 800402c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004030:	3b30      	subs	r3, #48	@ 0x30
 8004032:	2b09      	cmp	r3, #9
 8004034:	d94b      	bls.n	80040ce <_vfiprintf_r+0x1a2>
 8004036:	b1b0      	cbz	r0, 8004066 <_vfiprintf_r+0x13a>
 8004038:	9207      	str	r2, [sp, #28]
 800403a:	e014      	b.n	8004066 <_vfiprintf_r+0x13a>
 800403c:	eba0 0308 	sub.w	r3, r0, r8
 8004040:	fa09 f303 	lsl.w	r3, r9, r3
 8004044:	4313      	orrs	r3, r2
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	46a2      	mov	sl, r4
 800404a:	e7d2      	b.n	8003ff2 <_vfiprintf_r+0xc6>
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	1d19      	adds	r1, r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	9103      	str	r1, [sp, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	bfbb      	ittet	lt
 8004058:	425b      	neglt	r3, r3
 800405a:	f042 0202 	orrlt.w	r2, r2, #2
 800405e:	9307      	strge	r3, [sp, #28]
 8004060:	9307      	strlt	r3, [sp, #28]
 8004062:	bfb8      	it	lt
 8004064:	9204      	strlt	r2, [sp, #16]
 8004066:	7823      	ldrb	r3, [r4, #0]
 8004068:	2b2e      	cmp	r3, #46	@ 0x2e
 800406a:	d10a      	bne.n	8004082 <_vfiprintf_r+0x156>
 800406c:	7863      	ldrb	r3, [r4, #1]
 800406e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004070:	d132      	bne.n	80040d8 <_vfiprintf_r+0x1ac>
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	9203      	str	r2, [sp, #12]
 800407a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800407e:	3402      	adds	r4, #2
 8004080:	9305      	str	r3, [sp, #20]
 8004082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004158 <_vfiprintf_r+0x22c>
 8004086:	7821      	ldrb	r1, [r4, #0]
 8004088:	2203      	movs	r2, #3
 800408a:	4650      	mov	r0, sl
 800408c:	f7fc f8a0 	bl	80001d0 <memchr>
 8004090:	b138      	cbz	r0, 80040a2 <_vfiprintf_r+0x176>
 8004092:	9b04      	ldr	r3, [sp, #16]
 8004094:	eba0 000a 	sub.w	r0, r0, sl
 8004098:	2240      	movs	r2, #64	@ 0x40
 800409a:	4082      	lsls	r2, r0
 800409c:	4313      	orrs	r3, r2
 800409e:	3401      	adds	r4, #1
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a6:	4829      	ldr	r0, [pc, #164]	@ (800414c <_vfiprintf_r+0x220>)
 80040a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040ac:	2206      	movs	r2, #6
 80040ae:	f7fc f88f 	bl	80001d0 <memchr>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d03f      	beq.n	8004136 <_vfiprintf_r+0x20a>
 80040b6:	4b26      	ldr	r3, [pc, #152]	@ (8004150 <_vfiprintf_r+0x224>)
 80040b8:	bb1b      	cbnz	r3, 8004102 <_vfiprintf_r+0x1d6>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	3307      	adds	r3, #7
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	3308      	adds	r3, #8
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040c8:	443b      	add	r3, r7
 80040ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80040cc:	e76a      	b.n	8003fa4 <_vfiprintf_r+0x78>
 80040ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80040d2:	460c      	mov	r4, r1
 80040d4:	2001      	movs	r0, #1
 80040d6:	e7a8      	b.n	800402a <_vfiprintf_r+0xfe>
 80040d8:	2300      	movs	r3, #0
 80040da:	3401      	adds	r4, #1
 80040dc:	9305      	str	r3, [sp, #20]
 80040de:	4619      	mov	r1, r3
 80040e0:	f04f 0c0a 	mov.w	ip, #10
 80040e4:	4620      	mov	r0, r4
 80040e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ea:	3a30      	subs	r2, #48	@ 0x30
 80040ec:	2a09      	cmp	r2, #9
 80040ee:	d903      	bls.n	80040f8 <_vfiprintf_r+0x1cc>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0c6      	beq.n	8004082 <_vfiprintf_r+0x156>
 80040f4:	9105      	str	r1, [sp, #20]
 80040f6:	e7c4      	b.n	8004082 <_vfiprintf_r+0x156>
 80040f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80040fc:	4604      	mov	r4, r0
 80040fe:	2301      	movs	r3, #1
 8004100:	e7f0      	b.n	80040e4 <_vfiprintf_r+0x1b8>
 8004102:	ab03      	add	r3, sp, #12
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	462a      	mov	r2, r5
 8004108:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <_vfiprintf_r+0x228>)
 800410a:	a904      	add	r1, sp, #16
 800410c:	4630      	mov	r0, r6
 800410e:	f3af 8000 	nop.w
 8004112:	4607      	mov	r7, r0
 8004114:	1c78      	adds	r0, r7, #1
 8004116:	d1d6      	bne.n	80040c6 <_vfiprintf_r+0x19a>
 8004118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800411a:	07d9      	lsls	r1, r3, #31
 800411c:	d405      	bmi.n	800412a <_vfiprintf_r+0x1fe>
 800411e:	89ab      	ldrh	r3, [r5, #12]
 8004120:	059a      	lsls	r2, r3, #22
 8004122:	d402      	bmi.n	800412a <_vfiprintf_r+0x1fe>
 8004124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004126:	f7ff fed7 	bl	8003ed8 <__retarget_lock_release_recursive>
 800412a:	89ab      	ldrh	r3, [r5, #12]
 800412c:	065b      	lsls	r3, r3, #25
 800412e:	f53f af1f 	bmi.w	8003f70 <_vfiprintf_r+0x44>
 8004132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004134:	e71e      	b.n	8003f74 <_vfiprintf_r+0x48>
 8004136:	ab03      	add	r3, sp, #12
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	462a      	mov	r2, r5
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <_vfiprintf_r+0x228>)
 800413e:	a904      	add	r1, sp, #16
 8004140:	4630      	mov	r0, r6
 8004142:	f000 f91b 	bl	800437c <_printf_i>
 8004146:	e7e4      	b.n	8004112 <_vfiprintf_r+0x1e6>
 8004148:	08004bf8 	.word	0x08004bf8
 800414c:	08004c02 	.word	0x08004c02
 8004150:	00000000 	.word	0x00000000
 8004154:	08003f09 	.word	0x08003f09
 8004158:	08004bfe 	.word	0x08004bfe

0800415c <sbrk_aligned>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4e0f      	ldr	r6, [pc, #60]	@ (800419c <sbrk_aligned+0x40>)
 8004160:	460c      	mov	r4, r1
 8004162:	6831      	ldr	r1, [r6, #0]
 8004164:	4605      	mov	r5, r0
 8004166:	b911      	cbnz	r1, 800416e <sbrk_aligned+0x12>
 8004168:	f000 fca4 	bl	8004ab4 <_sbrk_r>
 800416c:	6030      	str	r0, [r6, #0]
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	f000 fc9f 	bl	8004ab4 <_sbrk_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d103      	bne.n	8004182 <sbrk_aligned+0x26>
 800417a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800417e:	4620      	mov	r0, r4
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	1cc4      	adds	r4, r0, #3
 8004184:	f024 0403 	bic.w	r4, r4, #3
 8004188:	42a0      	cmp	r0, r4
 800418a:	d0f8      	beq.n	800417e <sbrk_aligned+0x22>
 800418c:	1a21      	subs	r1, r4, r0
 800418e:	4628      	mov	r0, r5
 8004190:	f000 fc90 	bl	8004ab4 <_sbrk_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d1f2      	bne.n	800417e <sbrk_aligned+0x22>
 8004198:	e7ef      	b.n	800417a <sbrk_aligned+0x1e>
 800419a:	bf00      	nop
 800419c:	200002e8 	.word	0x200002e8

080041a0 <_malloc_r>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	1ccd      	adds	r5, r1, #3
 80041a6:	f025 0503 	bic.w	r5, r5, #3
 80041aa:	3508      	adds	r5, #8
 80041ac:	2d0c      	cmp	r5, #12
 80041ae:	bf38      	it	cc
 80041b0:	250c      	movcc	r5, #12
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	4606      	mov	r6, r0
 80041b6:	db01      	blt.n	80041bc <_malloc_r+0x1c>
 80041b8:	42a9      	cmp	r1, r5
 80041ba:	d904      	bls.n	80041c6 <_malloc_r+0x26>
 80041bc:	230c      	movs	r3, #12
 80041be:	6033      	str	r3, [r6, #0]
 80041c0:	2000      	movs	r0, #0
 80041c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800429c <_malloc_r+0xfc>
 80041ca:	f000 faa3 	bl	8004714 <__malloc_lock>
 80041ce:	f8d8 3000 	ldr.w	r3, [r8]
 80041d2:	461c      	mov	r4, r3
 80041d4:	bb44      	cbnz	r4, 8004228 <_malloc_r+0x88>
 80041d6:	4629      	mov	r1, r5
 80041d8:	4630      	mov	r0, r6
 80041da:	f7ff ffbf 	bl	800415c <sbrk_aligned>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	4604      	mov	r4, r0
 80041e2:	d158      	bne.n	8004296 <_malloc_r+0xf6>
 80041e4:	f8d8 4000 	ldr.w	r4, [r8]
 80041e8:	4627      	mov	r7, r4
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	d143      	bne.n	8004276 <_malloc_r+0xd6>
 80041ee:	2c00      	cmp	r4, #0
 80041f0:	d04b      	beq.n	800428a <_malloc_r+0xea>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	4639      	mov	r1, r7
 80041f6:	4630      	mov	r0, r6
 80041f8:	eb04 0903 	add.w	r9, r4, r3
 80041fc:	f000 fc5a 	bl	8004ab4 <_sbrk_r>
 8004200:	4581      	cmp	r9, r0
 8004202:	d142      	bne.n	800428a <_malloc_r+0xea>
 8004204:	6821      	ldr	r1, [r4, #0]
 8004206:	1a6d      	subs	r5, r5, r1
 8004208:	4629      	mov	r1, r5
 800420a:	4630      	mov	r0, r6
 800420c:	f7ff ffa6 	bl	800415c <sbrk_aligned>
 8004210:	3001      	adds	r0, #1
 8004212:	d03a      	beq.n	800428a <_malloc_r+0xea>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	442b      	add	r3, r5
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	f8d8 3000 	ldr.w	r3, [r8]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	bb62      	cbnz	r2, 800427c <_malloc_r+0xdc>
 8004222:	f8c8 7000 	str.w	r7, [r8]
 8004226:	e00f      	b.n	8004248 <_malloc_r+0xa8>
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	1b52      	subs	r2, r2, r5
 800422c:	d420      	bmi.n	8004270 <_malloc_r+0xd0>
 800422e:	2a0b      	cmp	r2, #11
 8004230:	d917      	bls.n	8004262 <_malloc_r+0xc2>
 8004232:	1961      	adds	r1, r4, r5
 8004234:	42a3      	cmp	r3, r4
 8004236:	6025      	str	r5, [r4, #0]
 8004238:	bf18      	it	ne
 800423a:	6059      	strne	r1, [r3, #4]
 800423c:	6863      	ldr	r3, [r4, #4]
 800423e:	bf08      	it	eq
 8004240:	f8c8 1000 	streq.w	r1, [r8]
 8004244:	5162      	str	r2, [r4, r5]
 8004246:	604b      	str	r3, [r1, #4]
 8004248:	4630      	mov	r0, r6
 800424a:	f000 fa69 	bl	8004720 <__malloc_unlock>
 800424e:	f104 000b 	add.w	r0, r4, #11
 8004252:	1d23      	adds	r3, r4, #4
 8004254:	f020 0007 	bic.w	r0, r0, #7
 8004258:	1ac2      	subs	r2, r0, r3
 800425a:	bf1c      	itt	ne
 800425c:	1a1b      	subne	r3, r3, r0
 800425e:	50a3      	strne	r3, [r4, r2]
 8004260:	e7af      	b.n	80041c2 <_malloc_r+0x22>
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	42a3      	cmp	r3, r4
 8004266:	bf0c      	ite	eq
 8004268:	f8c8 2000 	streq.w	r2, [r8]
 800426c:	605a      	strne	r2, [r3, #4]
 800426e:	e7eb      	b.n	8004248 <_malloc_r+0xa8>
 8004270:	4623      	mov	r3, r4
 8004272:	6864      	ldr	r4, [r4, #4]
 8004274:	e7ae      	b.n	80041d4 <_malloc_r+0x34>
 8004276:	463c      	mov	r4, r7
 8004278:	687f      	ldr	r7, [r7, #4]
 800427a:	e7b6      	b.n	80041ea <_malloc_r+0x4a>
 800427c:	461a      	mov	r2, r3
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	42a3      	cmp	r3, r4
 8004282:	d1fb      	bne.n	800427c <_malloc_r+0xdc>
 8004284:	2300      	movs	r3, #0
 8004286:	6053      	str	r3, [r2, #4]
 8004288:	e7de      	b.n	8004248 <_malloc_r+0xa8>
 800428a:	230c      	movs	r3, #12
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	4630      	mov	r0, r6
 8004290:	f000 fa46 	bl	8004720 <__malloc_unlock>
 8004294:	e794      	b.n	80041c0 <_malloc_r+0x20>
 8004296:	6005      	str	r5, [r0, #0]
 8004298:	e7d6      	b.n	8004248 <_malloc_r+0xa8>
 800429a:	bf00      	nop
 800429c:	200002ec 	.word	0x200002ec

080042a0 <_printf_common>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	4616      	mov	r6, r2
 80042a6:	4698      	mov	r8, r3
 80042a8:	688a      	ldr	r2, [r1, #8]
 80042aa:	690b      	ldr	r3, [r1, #16]
 80042ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042b0:	4293      	cmp	r3, r2
 80042b2:	bfb8      	it	lt
 80042b4:	4613      	movlt	r3, r2
 80042b6:	6033      	str	r3, [r6, #0]
 80042b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042bc:	4607      	mov	r7, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	b10a      	cbz	r2, 80042c6 <_printf_common+0x26>
 80042c2:	3301      	adds	r3, #1
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	0699      	lsls	r1, r3, #26
 80042ca:	bf42      	ittt	mi
 80042cc:	6833      	ldrmi	r3, [r6, #0]
 80042ce:	3302      	addmi	r3, #2
 80042d0:	6033      	strmi	r3, [r6, #0]
 80042d2:	6825      	ldr	r5, [r4, #0]
 80042d4:	f015 0506 	ands.w	r5, r5, #6
 80042d8:	d106      	bne.n	80042e8 <_printf_common+0x48>
 80042da:	f104 0a19 	add.w	sl, r4, #25
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	6832      	ldr	r2, [r6, #0]
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	42ab      	cmp	r3, r5
 80042e6:	dc26      	bgt.n	8004336 <_printf_common+0x96>
 80042e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	3b00      	subs	r3, #0
 80042f0:	bf18      	it	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	0692      	lsls	r2, r2, #26
 80042f6:	d42b      	bmi.n	8004350 <_printf_common+0xb0>
 80042f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042fc:	4641      	mov	r1, r8
 80042fe:	4638      	mov	r0, r7
 8004300:	47c8      	blx	r9
 8004302:	3001      	adds	r0, #1
 8004304:	d01e      	beq.n	8004344 <_printf_common+0xa4>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	6922      	ldr	r2, [r4, #16]
 800430a:	f003 0306 	and.w	r3, r3, #6
 800430e:	2b04      	cmp	r3, #4
 8004310:	bf02      	ittt	eq
 8004312:	68e5      	ldreq	r5, [r4, #12]
 8004314:	6833      	ldreq	r3, [r6, #0]
 8004316:	1aed      	subeq	r5, r5, r3
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	bf0c      	ite	eq
 800431c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004320:	2500      	movne	r5, #0
 8004322:	4293      	cmp	r3, r2
 8004324:	bfc4      	itt	gt
 8004326:	1a9b      	subgt	r3, r3, r2
 8004328:	18ed      	addgt	r5, r5, r3
 800432a:	2600      	movs	r6, #0
 800432c:	341a      	adds	r4, #26
 800432e:	42b5      	cmp	r5, r6
 8004330:	d11a      	bne.n	8004368 <_printf_common+0xc8>
 8004332:	2000      	movs	r0, #0
 8004334:	e008      	b.n	8004348 <_printf_common+0xa8>
 8004336:	2301      	movs	r3, #1
 8004338:	4652      	mov	r2, sl
 800433a:	4641      	mov	r1, r8
 800433c:	4638      	mov	r0, r7
 800433e:	47c8      	blx	r9
 8004340:	3001      	adds	r0, #1
 8004342:	d103      	bne.n	800434c <_printf_common+0xac>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434c:	3501      	adds	r5, #1
 800434e:	e7c6      	b.n	80042de <_printf_common+0x3e>
 8004350:	18e1      	adds	r1, r4, r3
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	2030      	movs	r0, #48	@ 0x30
 8004356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800435a:	4422      	add	r2, r4
 800435c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004364:	3302      	adds	r3, #2
 8004366:	e7c7      	b.n	80042f8 <_printf_common+0x58>
 8004368:	2301      	movs	r3, #1
 800436a:	4622      	mov	r2, r4
 800436c:	4641      	mov	r1, r8
 800436e:	4638      	mov	r0, r7
 8004370:	47c8      	blx	r9
 8004372:	3001      	adds	r0, #1
 8004374:	d0e6      	beq.n	8004344 <_printf_common+0xa4>
 8004376:	3601      	adds	r6, #1
 8004378:	e7d9      	b.n	800432e <_printf_common+0x8e>
	...

0800437c <_printf_i>:
 800437c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	7e0f      	ldrb	r7, [r1, #24]
 8004382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004384:	2f78      	cmp	r7, #120	@ 0x78
 8004386:	4691      	mov	r9, r2
 8004388:	4680      	mov	r8, r0
 800438a:	460c      	mov	r4, r1
 800438c:	469a      	mov	sl, r3
 800438e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004392:	d807      	bhi.n	80043a4 <_printf_i+0x28>
 8004394:	2f62      	cmp	r7, #98	@ 0x62
 8004396:	d80a      	bhi.n	80043ae <_printf_i+0x32>
 8004398:	2f00      	cmp	r7, #0
 800439a:	f000 80d2 	beq.w	8004542 <_printf_i+0x1c6>
 800439e:	2f58      	cmp	r7, #88	@ 0x58
 80043a0:	f000 80b9 	beq.w	8004516 <_printf_i+0x19a>
 80043a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043ac:	e03a      	b.n	8004424 <_printf_i+0xa8>
 80043ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043b2:	2b15      	cmp	r3, #21
 80043b4:	d8f6      	bhi.n	80043a4 <_printf_i+0x28>
 80043b6:	a101      	add	r1, pc, #4	@ (adr r1, 80043bc <_printf_i+0x40>)
 80043b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043bc:	08004415 	.word	0x08004415
 80043c0:	08004429 	.word	0x08004429
 80043c4:	080043a5 	.word	0x080043a5
 80043c8:	080043a5 	.word	0x080043a5
 80043cc:	080043a5 	.word	0x080043a5
 80043d0:	080043a5 	.word	0x080043a5
 80043d4:	08004429 	.word	0x08004429
 80043d8:	080043a5 	.word	0x080043a5
 80043dc:	080043a5 	.word	0x080043a5
 80043e0:	080043a5 	.word	0x080043a5
 80043e4:	080043a5 	.word	0x080043a5
 80043e8:	08004529 	.word	0x08004529
 80043ec:	08004453 	.word	0x08004453
 80043f0:	080044e3 	.word	0x080044e3
 80043f4:	080043a5 	.word	0x080043a5
 80043f8:	080043a5 	.word	0x080043a5
 80043fc:	0800454b 	.word	0x0800454b
 8004400:	080043a5 	.word	0x080043a5
 8004404:	08004453 	.word	0x08004453
 8004408:	080043a5 	.word	0x080043a5
 800440c:	080043a5 	.word	0x080043a5
 8004410:	080044eb 	.word	0x080044eb
 8004414:	6833      	ldr	r3, [r6, #0]
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6032      	str	r2, [r6, #0]
 800441c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004424:	2301      	movs	r3, #1
 8004426:	e09d      	b.n	8004564 <_printf_i+0x1e8>
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	1d19      	adds	r1, r3, #4
 800442e:	6031      	str	r1, [r6, #0]
 8004430:	0606      	lsls	r6, r0, #24
 8004432:	d501      	bpl.n	8004438 <_printf_i+0xbc>
 8004434:	681d      	ldr	r5, [r3, #0]
 8004436:	e003      	b.n	8004440 <_printf_i+0xc4>
 8004438:	0645      	lsls	r5, r0, #25
 800443a:	d5fb      	bpl.n	8004434 <_printf_i+0xb8>
 800443c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004440:	2d00      	cmp	r5, #0
 8004442:	da03      	bge.n	800444c <_printf_i+0xd0>
 8004444:	232d      	movs	r3, #45	@ 0x2d
 8004446:	426d      	negs	r5, r5
 8004448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800444c:	4859      	ldr	r0, [pc, #356]	@ (80045b4 <_printf_i+0x238>)
 800444e:	230a      	movs	r3, #10
 8004450:	e011      	b.n	8004476 <_printf_i+0xfa>
 8004452:	6821      	ldr	r1, [r4, #0]
 8004454:	6833      	ldr	r3, [r6, #0]
 8004456:	0608      	lsls	r0, r1, #24
 8004458:	f853 5b04 	ldr.w	r5, [r3], #4
 800445c:	d402      	bmi.n	8004464 <_printf_i+0xe8>
 800445e:	0649      	lsls	r1, r1, #25
 8004460:	bf48      	it	mi
 8004462:	b2ad      	uxthmi	r5, r5
 8004464:	2f6f      	cmp	r7, #111	@ 0x6f
 8004466:	4853      	ldr	r0, [pc, #332]	@ (80045b4 <_printf_i+0x238>)
 8004468:	6033      	str	r3, [r6, #0]
 800446a:	bf14      	ite	ne
 800446c:	230a      	movne	r3, #10
 800446e:	2308      	moveq	r3, #8
 8004470:	2100      	movs	r1, #0
 8004472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004476:	6866      	ldr	r6, [r4, #4]
 8004478:	60a6      	str	r6, [r4, #8]
 800447a:	2e00      	cmp	r6, #0
 800447c:	bfa2      	ittt	ge
 800447e:	6821      	ldrge	r1, [r4, #0]
 8004480:	f021 0104 	bicge.w	r1, r1, #4
 8004484:	6021      	strge	r1, [r4, #0]
 8004486:	b90d      	cbnz	r5, 800448c <_printf_i+0x110>
 8004488:	2e00      	cmp	r6, #0
 800448a:	d04b      	beq.n	8004524 <_printf_i+0x1a8>
 800448c:	4616      	mov	r6, r2
 800448e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004492:	fb03 5711 	mls	r7, r3, r1, r5
 8004496:	5dc7      	ldrb	r7, [r0, r7]
 8004498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800449c:	462f      	mov	r7, r5
 800449e:	42bb      	cmp	r3, r7
 80044a0:	460d      	mov	r5, r1
 80044a2:	d9f4      	bls.n	800448e <_printf_i+0x112>
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d10b      	bne.n	80044c0 <_printf_i+0x144>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	07df      	lsls	r7, r3, #31
 80044ac:	d508      	bpl.n	80044c0 <_printf_i+0x144>
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	6861      	ldr	r1, [r4, #4]
 80044b2:	4299      	cmp	r1, r3
 80044b4:	bfde      	ittt	le
 80044b6:	2330      	movle	r3, #48	@ 0x30
 80044b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80044c0:	1b92      	subs	r2, r2, r6
 80044c2:	6122      	str	r2, [r4, #16]
 80044c4:	f8cd a000 	str.w	sl, [sp]
 80044c8:	464b      	mov	r3, r9
 80044ca:	aa03      	add	r2, sp, #12
 80044cc:	4621      	mov	r1, r4
 80044ce:	4640      	mov	r0, r8
 80044d0:	f7ff fee6 	bl	80042a0 <_printf_common>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d14a      	bne.n	800456e <_printf_i+0x1f2>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044dc:	b004      	add	sp, #16
 80044de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	f043 0320 	orr.w	r3, r3, #32
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	4833      	ldr	r0, [pc, #204]	@ (80045b8 <_printf_i+0x23c>)
 80044ec:	2778      	movs	r7, #120	@ 0x78
 80044ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	6831      	ldr	r1, [r6, #0]
 80044f6:	061f      	lsls	r7, r3, #24
 80044f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80044fc:	d402      	bmi.n	8004504 <_printf_i+0x188>
 80044fe:	065f      	lsls	r7, r3, #25
 8004500:	bf48      	it	mi
 8004502:	b2ad      	uxthmi	r5, r5
 8004504:	6031      	str	r1, [r6, #0]
 8004506:	07d9      	lsls	r1, r3, #31
 8004508:	bf44      	itt	mi
 800450a:	f043 0320 	orrmi.w	r3, r3, #32
 800450e:	6023      	strmi	r3, [r4, #0]
 8004510:	b11d      	cbz	r5, 800451a <_printf_i+0x19e>
 8004512:	2310      	movs	r3, #16
 8004514:	e7ac      	b.n	8004470 <_printf_i+0xf4>
 8004516:	4827      	ldr	r0, [pc, #156]	@ (80045b4 <_printf_i+0x238>)
 8004518:	e7e9      	b.n	80044ee <_printf_i+0x172>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	f023 0320 	bic.w	r3, r3, #32
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	e7f6      	b.n	8004512 <_printf_i+0x196>
 8004524:	4616      	mov	r6, r2
 8004526:	e7bd      	b.n	80044a4 <_printf_i+0x128>
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	6825      	ldr	r5, [r4, #0]
 800452c:	6961      	ldr	r1, [r4, #20]
 800452e:	1d18      	adds	r0, r3, #4
 8004530:	6030      	str	r0, [r6, #0]
 8004532:	062e      	lsls	r6, r5, #24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	d501      	bpl.n	800453c <_printf_i+0x1c0>
 8004538:	6019      	str	r1, [r3, #0]
 800453a:	e002      	b.n	8004542 <_printf_i+0x1c6>
 800453c:	0668      	lsls	r0, r5, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0x1bc>
 8004540:	8019      	strh	r1, [r3, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	6123      	str	r3, [r4, #16]
 8004546:	4616      	mov	r6, r2
 8004548:	e7bc      	b.n	80044c4 <_printf_i+0x148>
 800454a:	6833      	ldr	r3, [r6, #0]
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	6032      	str	r2, [r6, #0]
 8004550:	681e      	ldr	r6, [r3, #0]
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	2100      	movs	r1, #0
 8004556:	4630      	mov	r0, r6
 8004558:	f7fb fe3a 	bl	80001d0 <memchr>
 800455c:	b108      	cbz	r0, 8004562 <_printf_i+0x1e6>
 800455e:	1b80      	subs	r0, r0, r6
 8004560:	6060      	str	r0, [r4, #4]
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	6123      	str	r3, [r4, #16]
 8004566:	2300      	movs	r3, #0
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800456c:	e7aa      	b.n	80044c4 <_printf_i+0x148>
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	4632      	mov	r2, r6
 8004572:	4649      	mov	r1, r9
 8004574:	4640      	mov	r0, r8
 8004576:	47d0      	blx	sl
 8004578:	3001      	adds	r0, #1
 800457a:	d0ad      	beq.n	80044d8 <_printf_i+0x15c>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	079b      	lsls	r3, r3, #30
 8004580:	d413      	bmi.n	80045aa <_printf_i+0x22e>
 8004582:	68e0      	ldr	r0, [r4, #12]
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	4298      	cmp	r0, r3
 8004588:	bfb8      	it	lt
 800458a:	4618      	movlt	r0, r3
 800458c:	e7a6      	b.n	80044dc <_printf_i+0x160>
 800458e:	2301      	movs	r3, #1
 8004590:	4632      	mov	r2, r6
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	47d0      	blx	sl
 8004598:	3001      	adds	r0, #1
 800459a:	d09d      	beq.n	80044d8 <_printf_i+0x15c>
 800459c:	3501      	adds	r5, #1
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	9903      	ldr	r1, [sp, #12]
 80045a2:	1a5b      	subs	r3, r3, r1
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dcf2      	bgt.n	800458e <_printf_i+0x212>
 80045a8:	e7eb      	b.n	8004582 <_printf_i+0x206>
 80045aa:	2500      	movs	r5, #0
 80045ac:	f104 0619 	add.w	r6, r4, #25
 80045b0:	e7f5      	b.n	800459e <_printf_i+0x222>
 80045b2:	bf00      	nop
 80045b4:	08004c09 	.word	0x08004c09
 80045b8:	08004c1a 	.word	0x08004c1a

080045bc <__sflush_r>:
 80045bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	0716      	lsls	r6, r2, #28
 80045c6:	4605      	mov	r5, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	d454      	bmi.n	8004676 <__sflush_r+0xba>
 80045cc:	684b      	ldr	r3, [r1, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	dc02      	bgt.n	80045d8 <__sflush_r+0x1c>
 80045d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dd48      	ble.n	800466a <__sflush_r+0xae>
 80045d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d045      	beq.n	800466a <__sflush_r+0xae>
 80045de:	2300      	movs	r3, #0
 80045e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045e4:	682f      	ldr	r7, [r5, #0]
 80045e6:	6a21      	ldr	r1, [r4, #32]
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	d030      	beq.n	800464e <__sflush_r+0x92>
 80045ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	0759      	lsls	r1, r3, #29
 80045f2:	d505      	bpl.n	8004600 <__sflush_r+0x44>
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045fa:	b10b      	cbz	r3, 8004600 <__sflush_r+0x44>
 80045fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	2300      	movs	r3, #0
 8004602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004604:	6a21      	ldr	r1, [r4, #32]
 8004606:	4628      	mov	r0, r5
 8004608:	47b0      	blx	r6
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	d106      	bne.n	800461e <__sflush_r+0x62>
 8004610:	6829      	ldr	r1, [r5, #0]
 8004612:	291d      	cmp	r1, #29
 8004614:	d82b      	bhi.n	800466e <__sflush_r+0xb2>
 8004616:	4a2a      	ldr	r2, [pc, #168]	@ (80046c0 <__sflush_r+0x104>)
 8004618:	410a      	asrs	r2, r1
 800461a:	07d6      	lsls	r6, r2, #31
 800461c:	d427      	bmi.n	800466e <__sflush_r+0xb2>
 800461e:	2200      	movs	r2, #0
 8004620:	6062      	str	r2, [r4, #4]
 8004622:	04d9      	lsls	r1, r3, #19
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	6022      	str	r2, [r4, #0]
 8004628:	d504      	bpl.n	8004634 <__sflush_r+0x78>
 800462a:	1c42      	adds	r2, r0, #1
 800462c:	d101      	bne.n	8004632 <__sflush_r+0x76>
 800462e:	682b      	ldr	r3, [r5, #0]
 8004630:	b903      	cbnz	r3, 8004634 <__sflush_r+0x78>
 8004632:	6560      	str	r0, [r4, #84]	@ 0x54
 8004634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004636:	602f      	str	r7, [r5, #0]
 8004638:	b1b9      	cbz	r1, 800466a <__sflush_r+0xae>
 800463a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800463e:	4299      	cmp	r1, r3
 8004640:	d002      	beq.n	8004648 <__sflush_r+0x8c>
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fa58 	bl	8004af8 <_free_r>
 8004648:	2300      	movs	r3, #0
 800464a:	6363      	str	r3, [r4, #52]	@ 0x34
 800464c:	e00d      	b.n	800466a <__sflush_r+0xae>
 800464e:	2301      	movs	r3, #1
 8004650:	4628      	mov	r0, r5
 8004652:	47b0      	blx	r6
 8004654:	4602      	mov	r2, r0
 8004656:	1c50      	adds	r0, r2, #1
 8004658:	d1c9      	bne.n	80045ee <__sflush_r+0x32>
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0c6      	beq.n	80045ee <__sflush_r+0x32>
 8004660:	2b1d      	cmp	r3, #29
 8004662:	d001      	beq.n	8004668 <__sflush_r+0xac>
 8004664:	2b16      	cmp	r3, #22
 8004666:	d11e      	bne.n	80046a6 <__sflush_r+0xea>
 8004668:	602f      	str	r7, [r5, #0]
 800466a:	2000      	movs	r0, #0
 800466c:	e022      	b.n	80046b4 <__sflush_r+0xf8>
 800466e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004672:	b21b      	sxth	r3, r3
 8004674:	e01b      	b.n	80046ae <__sflush_r+0xf2>
 8004676:	690f      	ldr	r7, [r1, #16]
 8004678:	2f00      	cmp	r7, #0
 800467a:	d0f6      	beq.n	800466a <__sflush_r+0xae>
 800467c:	0793      	lsls	r3, r2, #30
 800467e:	680e      	ldr	r6, [r1, #0]
 8004680:	bf08      	it	eq
 8004682:	694b      	ldreq	r3, [r1, #20]
 8004684:	600f      	str	r7, [r1, #0]
 8004686:	bf18      	it	ne
 8004688:	2300      	movne	r3, #0
 800468a:	eba6 0807 	sub.w	r8, r6, r7
 800468e:	608b      	str	r3, [r1, #8]
 8004690:	f1b8 0f00 	cmp.w	r8, #0
 8004694:	dde9      	ble.n	800466a <__sflush_r+0xae>
 8004696:	6a21      	ldr	r1, [r4, #32]
 8004698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800469a:	4643      	mov	r3, r8
 800469c:	463a      	mov	r2, r7
 800469e:	4628      	mov	r0, r5
 80046a0:	47b0      	blx	r6
 80046a2:	2800      	cmp	r0, #0
 80046a4:	dc08      	bgt.n	80046b8 <__sflush_r+0xfc>
 80046a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ae:	81a3      	strh	r3, [r4, #12]
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b8:	4407      	add	r7, r0
 80046ba:	eba8 0800 	sub.w	r8, r8, r0
 80046be:	e7e7      	b.n	8004690 <__sflush_r+0xd4>
 80046c0:	dfbffffe 	.word	0xdfbffffe

080046c4 <_fflush_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	b913      	cbnz	r3, 80046d4 <_fflush_r+0x10>
 80046ce:	2500      	movs	r5, #0
 80046d0:	4628      	mov	r0, r5
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	b118      	cbz	r0, 80046de <_fflush_r+0x1a>
 80046d6:	6a03      	ldr	r3, [r0, #32]
 80046d8:	b90b      	cbnz	r3, 80046de <_fflush_r+0x1a>
 80046da:	f7ff fb79 	bl	8003dd0 <__sinit>
 80046de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f3      	beq.n	80046ce <_fflush_r+0xa>
 80046e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046e8:	07d0      	lsls	r0, r2, #31
 80046ea:	d404      	bmi.n	80046f6 <_fflush_r+0x32>
 80046ec:	0599      	lsls	r1, r3, #22
 80046ee:	d402      	bmi.n	80046f6 <_fflush_r+0x32>
 80046f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046f2:	f7ff fbf0 	bl	8003ed6 <__retarget_lock_acquire_recursive>
 80046f6:	4628      	mov	r0, r5
 80046f8:	4621      	mov	r1, r4
 80046fa:	f7ff ff5f 	bl	80045bc <__sflush_r>
 80046fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004700:	07da      	lsls	r2, r3, #31
 8004702:	4605      	mov	r5, r0
 8004704:	d4e4      	bmi.n	80046d0 <_fflush_r+0xc>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	059b      	lsls	r3, r3, #22
 800470a:	d4e1      	bmi.n	80046d0 <_fflush_r+0xc>
 800470c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800470e:	f7ff fbe3 	bl	8003ed8 <__retarget_lock_release_recursive>
 8004712:	e7dd      	b.n	80046d0 <_fflush_r+0xc>

08004714 <__malloc_lock>:
 8004714:	4801      	ldr	r0, [pc, #4]	@ (800471c <__malloc_lock+0x8>)
 8004716:	f7ff bbde 	b.w	8003ed6 <__retarget_lock_acquire_recursive>
 800471a:	bf00      	nop
 800471c:	200002e4 	.word	0x200002e4

08004720 <__malloc_unlock>:
 8004720:	4801      	ldr	r0, [pc, #4]	@ (8004728 <__malloc_unlock+0x8>)
 8004722:	f7ff bbd9 	b.w	8003ed8 <__retarget_lock_release_recursive>
 8004726:	bf00      	nop
 8004728:	200002e4 	.word	0x200002e4

0800472c <__sread>:
 800472c:	b510      	push	{r4, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	f000 f9ac 	bl	8004a90 <_read_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	bfab      	itete	ge
 800473c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800473e:	89a3      	ldrhlt	r3, [r4, #12]
 8004740:	181b      	addge	r3, r3, r0
 8004742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004746:	bfac      	ite	ge
 8004748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800474a:	81a3      	strhlt	r3, [r4, #12]
 800474c:	bd10      	pop	{r4, pc}

0800474e <__swrite>:
 800474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004752:	461f      	mov	r7, r3
 8004754:	898b      	ldrh	r3, [r1, #12]
 8004756:	05db      	lsls	r3, r3, #23
 8004758:	4605      	mov	r5, r0
 800475a:	460c      	mov	r4, r1
 800475c:	4616      	mov	r6, r2
 800475e:	d505      	bpl.n	800476c <__swrite+0x1e>
 8004760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004764:	2302      	movs	r3, #2
 8004766:	2200      	movs	r2, #0
 8004768:	f000 f980 	bl	8004a6c <_lseek_r>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	4632      	mov	r2, r6
 800477a:	463b      	mov	r3, r7
 800477c:	4628      	mov	r0, r5
 800477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004782:	f000 b9a7 	b.w	8004ad4 <_write_r>

08004786 <__sseek>:
 8004786:	b510      	push	{r4, lr}
 8004788:	460c      	mov	r4, r1
 800478a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478e:	f000 f96d 	bl	8004a6c <_lseek_r>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	bf15      	itete	ne
 8004798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800479a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800479e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047a2:	81a3      	strheq	r3, [r4, #12]
 80047a4:	bf18      	it	ne
 80047a6:	81a3      	strhne	r3, [r4, #12]
 80047a8:	bd10      	pop	{r4, pc}

080047aa <__sclose>:
 80047aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ae:	f000 b92b 	b.w	8004a08 <_close_r>

080047b2 <__swbuf_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	460e      	mov	r6, r1
 80047b6:	4614      	mov	r4, r2
 80047b8:	4605      	mov	r5, r0
 80047ba:	b118      	cbz	r0, 80047c4 <__swbuf_r+0x12>
 80047bc:	6a03      	ldr	r3, [r0, #32]
 80047be:	b90b      	cbnz	r3, 80047c4 <__swbuf_r+0x12>
 80047c0:	f7ff fb06 	bl	8003dd0 <__sinit>
 80047c4:	69a3      	ldr	r3, [r4, #24]
 80047c6:	60a3      	str	r3, [r4, #8]
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	071a      	lsls	r2, r3, #28
 80047cc:	d501      	bpl.n	80047d2 <__swbuf_r+0x20>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	b943      	cbnz	r3, 80047e4 <__swbuf_r+0x32>
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f82b 	bl	8004830 <__swsetup_r>
 80047da:	b118      	cbz	r0, 80047e4 <__swbuf_r+0x32>
 80047dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80047e0:	4638      	mov	r0, r7
 80047e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	6922      	ldr	r2, [r4, #16]
 80047e8:	1a98      	subs	r0, r3, r2
 80047ea:	6963      	ldr	r3, [r4, #20]
 80047ec:	b2f6      	uxtb	r6, r6
 80047ee:	4283      	cmp	r3, r0
 80047f0:	4637      	mov	r7, r6
 80047f2:	dc05      	bgt.n	8004800 <__swbuf_r+0x4e>
 80047f4:	4621      	mov	r1, r4
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7ff ff64 	bl	80046c4 <_fflush_r>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d1ed      	bne.n	80047dc <__swbuf_r+0x2a>
 8004800:	68a3      	ldr	r3, [r4, #8]
 8004802:	3b01      	subs	r3, #1
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	6022      	str	r2, [r4, #0]
 800480c:	701e      	strb	r6, [r3, #0]
 800480e:	6962      	ldr	r2, [r4, #20]
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	429a      	cmp	r2, r3
 8004814:	d004      	beq.n	8004820 <__swbuf_r+0x6e>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	07db      	lsls	r3, r3, #31
 800481a:	d5e1      	bpl.n	80047e0 <__swbuf_r+0x2e>
 800481c:	2e0a      	cmp	r6, #10
 800481e:	d1df      	bne.n	80047e0 <__swbuf_r+0x2e>
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff ff4e 	bl	80046c4 <_fflush_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	d0d9      	beq.n	80047e0 <__swbuf_r+0x2e>
 800482c:	e7d6      	b.n	80047dc <__swbuf_r+0x2a>
	...

08004830 <__swsetup_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4b29      	ldr	r3, [pc, #164]	@ (80048d8 <__swsetup_r+0xa8>)
 8004834:	4605      	mov	r5, r0
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	460c      	mov	r4, r1
 800483a:	b118      	cbz	r0, 8004844 <__swsetup_r+0x14>
 800483c:	6a03      	ldr	r3, [r0, #32]
 800483e:	b90b      	cbnz	r3, 8004844 <__swsetup_r+0x14>
 8004840:	f7ff fac6 	bl	8003dd0 <__sinit>
 8004844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004848:	0719      	lsls	r1, r3, #28
 800484a:	d422      	bmi.n	8004892 <__swsetup_r+0x62>
 800484c:	06da      	lsls	r2, r3, #27
 800484e:	d407      	bmi.n	8004860 <__swsetup_r+0x30>
 8004850:	2209      	movs	r2, #9
 8004852:	602a      	str	r2, [r5, #0]
 8004854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800485e:	e033      	b.n	80048c8 <__swsetup_r+0x98>
 8004860:	0758      	lsls	r0, r3, #29
 8004862:	d512      	bpl.n	800488a <__swsetup_r+0x5a>
 8004864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004866:	b141      	cbz	r1, 800487a <__swsetup_r+0x4a>
 8004868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800486c:	4299      	cmp	r1, r3
 800486e:	d002      	beq.n	8004876 <__swsetup_r+0x46>
 8004870:	4628      	mov	r0, r5
 8004872:	f000 f941 	bl	8004af8 <_free_r>
 8004876:	2300      	movs	r3, #0
 8004878:	6363      	str	r3, [r4, #52]	@ 0x34
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	2300      	movs	r3, #0
 8004884:	6063      	str	r3, [r4, #4]
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f043 0308 	orr.w	r3, r3, #8
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	b94b      	cbnz	r3, 80048aa <__swsetup_r+0x7a>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d003      	beq.n	80048aa <__swsetup_r+0x7a>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 f83f 	bl	8004928 <__smakebuf_r>
 80048aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ae:	f013 0201 	ands.w	r2, r3, #1
 80048b2:	d00a      	beq.n	80048ca <__swsetup_r+0x9a>
 80048b4:	2200      	movs	r2, #0
 80048b6:	60a2      	str	r2, [r4, #8]
 80048b8:	6962      	ldr	r2, [r4, #20]
 80048ba:	4252      	negs	r2, r2
 80048bc:	61a2      	str	r2, [r4, #24]
 80048be:	6922      	ldr	r2, [r4, #16]
 80048c0:	b942      	cbnz	r2, 80048d4 <__swsetup_r+0xa4>
 80048c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048c6:	d1c5      	bne.n	8004854 <__swsetup_r+0x24>
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
 80048ca:	0799      	lsls	r1, r3, #30
 80048cc:	bf58      	it	pl
 80048ce:	6962      	ldrpl	r2, [r4, #20]
 80048d0:	60a2      	str	r2, [r4, #8]
 80048d2:	e7f4      	b.n	80048be <__swsetup_r+0x8e>
 80048d4:	2000      	movs	r0, #0
 80048d6:	e7f7      	b.n	80048c8 <__swsetup_r+0x98>
 80048d8:	20000018 	.word	0x20000018

080048dc <__swhatbuf_r>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	460c      	mov	r4, r1
 80048e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e4:	2900      	cmp	r1, #0
 80048e6:	b096      	sub	sp, #88	@ 0x58
 80048e8:	4615      	mov	r5, r2
 80048ea:	461e      	mov	r6, r3
 80048ec:	da0d      	bge.n	800490a <__swhatbuf_r+0x2e>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2340      	movne	r3, #64	@ 0x40
 80048fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004900:	2000      	movs	r0, #0
 8004902:	6031      	str	r1, [r6, #0]
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	b016      	add	sp, #88	@ 0x58
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	466a      	mov	r2, sp
 800490c:	f000 f88c 	bl	8004a28 <_fstat_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	dbec      	blt.n	80048ee <__swhatbuf_r+0x12>
 8004914:	9901      	ldr	r1, [sp, #4]
 8004916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800491a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800491e:	4259      	negs	r1, r3
 8004920:	4159      	adcs	r1, r3
 8004922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004926:	e7eb      	b.n	8004900 <__swhatbuf_r+0x24>

08004928 <__smakebuf_r>:
 8004928:	898b      	ldrh	r3, [r1, #12]
 800492a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800492c:	079d      	lsls	r5, r3, #30
 800492e:	4606      	mov	r6, r0
 8004930:	460c      	mov	r4, r1
 8004932:	d507      	bpl.n	8004944 <__smakebuf_r+0x1c>
 8004934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	2301      	movs	r3, #1
 800493e:	6163      	str	r3, [r4, #20]
 8004940:	b003      	add	sp, #12
 8004942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004944:	ab01      	add	r3, sp, #4
 8004946:	466a      	mov	r2, sp
 8004948:	f7ff ffc8 	bl	80048dc <__swhatbuf_r>
 800494c:	9f00      	ldr	r7, [sp, #0]
 800494e:	4605      	mov	r5, r0
 8004950:	4639      	mov	r1, r7
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff fc24 	bl	80041a0 <_malloc_r>
 8004958:	b948      	cbnz	r0, 800496e <__smakebuf_r+0x46>
 800495a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495e:	059a      	lsls	r2, r3, #22
 8004960:	d4ee      	bmi.n	8004940 <__smakebuf_r+0x18>
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	f043 0302 	orr.w	r3, r3, #2
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	e7e2      	b.n	8004934 <__smakebuf_r+0xc>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	6020      	str	r0, [r4, #0]
 8004972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800497e:	b15b      	cbz	r3, 8004998 <__smakebuf_r+0x70>
 8004980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f861 	bl	8004a4c <_isatty_r>
 800498a:	b128      	cbz	r0, 8004998 <__smakebuf_r+0x70>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	431d      	orrs	r5, r3
 800499c:	81a5      	strh	r5, [r4, #12]
 800499e:	e7cf      	b.n	8004940 <__smakebuf_r+0x18>

080049a0 <_putc_r>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	460d      	mov	r5, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	4606      	mov	r6, r0
 80049a8:	b118      	cbz	r0, 80049b2 <_putc_r+0x12>
 80049aa:	6a03      	ldr	r3, [r0, #32]
 80049ac:	b90b      	cbnz	r3, 80049b2 <_putc_r+0x12>
 80049ae:	f7ff fa0f 	bl	8003dd0 <__sinit>
 80049b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049b4:	07d8      	lsls	r0, r3, #31
 80049b6:	d405      	bmi.n	80049c4 <_putc_r+0x24>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	0599      	lsls	r1, r3, #22
 80049bc:	d402      	bmi.n	80049c4 <_putc_r+0x24>
 80049be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049c0:	f7ff fa89 	bl	8003ed6 <__retarget_lock_acquire_recursive>
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	60a3      	str	r3, [r4, #8]
 80049cc:	da05      	bge.n	80049da <_putc_r+0x3a>
 80049ce:	69a2      	ldr	r2, [r4, #24]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	db12      	blt.n	80049fa <_putc_r+0x5a>
 80049d4:	b2eb      	uxtb	r3, r5
 80049d6:	2b0a      	cmp	r3, #10
 80049d8:	d00f      	beq.n	80049fa <_putc_r+0x5a>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	701d      	strb	r5, [r3, #0]
 80049e2:	b2ed      	uxtb	r5, r5
 80049e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049e6:	07da      	lsls	r2, r3, #31
 80049e8:	d405      	bmi.n	80049f6 <_putc_r+0x56>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	059b      	lsls	r3, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <_putc_r+0x56>
 80049f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049f2:	f7ff fa71 	bl	8003ed8 <__retarget_lock_release_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	bd70      	pop	{r4, r5, r6, pc}
 80049fa:	4629      	mov	r1, r5
 80049fc:	4622      	mov	r2, r4
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7ff fed7 	bl	80047b2 <__swbuf_r>
 8004a04:	4605      	mov	r5, r0
 8004a06:	e7ed      	b.n	80049e4 <_putc_r+0x44>

08004a08 <_close_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d06      	ldr	r5, [pc, #24]	@ (8004a24 <_close_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fc fab1 	bl	8000f7a <_close>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_close_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_close_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	200002f0 	.word	0x200002f0

08004a28 <_fstat_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d07      	ldr	r5, [pc, #28]	@ (8004a48 <_fstat_r+0x20>)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	602b      	str	r3, [r5, #0]
 8004a36:	f7fc faac 	bl	8000f92 <_fstat>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	d102      	bne.n	8004a44 <_fstat_r+0x1c>
 8004a3e:	682b      	ldr	r3, [r5, #0]
 8004a40:	b103      	cbz	r3, 8004a44 <_fstat_r+0x1c>
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	bd38      	pop	{r3, r4, r5, pc}
 8004a46:	bf00      	nop
 8004a48:	200002f0 	.word	0x200002f0

08004a4c <_isatty_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4d06      	ldr	r5, [pc, #24]	@ (8004a68 <_isatty_r+0x1c>)
 8004a50:	2300      	movs	r3, #0
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	f7fc faab 	bl	8000fb2 <_isatty>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_isatty_r+0x1a>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_isatty_r+0x1a>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	200002f0 	.word	0x200002f0

08004a6c <_lseek_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d07      	ldr	r5, [pc, #28]	@ (8004a8c <_lseek_r+0x20>)
 8004a70:	4604      	mov	r4, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	602a      	str	r2, [r5, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7fc faa4 	bl	8000fc8 <_lseek>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_lseek_r+0x1e>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_lseek_r+0x1e>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	200002f0 	.word	0x200002f0

08004a90 <_read_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	@ (8004ab0 <_read_r+0x20>)
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7fc fa32 	bl	8000f08 <_read>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_read_r+0x1e>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_read_r+0x1e>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	200002f0 	.word	0x200002f0

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d06      	ldr	r5, [pc, #24]	@ (8004ad0 <_sbrk_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fc fa90 	bl	8000fe4 <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	200002f0 	.word	0x200002f0

08004ad4 <_write_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	@ (8004af4 <_write_r+0x20>)
 8004ad8:	4604      	mov	r4, r0
 8004ada:	4608      	mov	r0, r1
 8004adc:	4611      	mov	r1, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	602a      	str	r2, [r5, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7fc fa2d 	bl	8000f42 <_write>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_write_r+0x1e>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_write_r+0x1e>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	200002f0 	.word	0x200002f0

08004af8 <_free_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4605      	mov	r5, r0
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d041      	beq.n	8004b84 <_free_r+0x8c>
 8004b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b04:	1f0c      	subs	r4, r1, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfb8      	it	lt
 8004b0a:	18e4      	addlt	r4, r4, r3
 8004b0c:	f7ff fe02 	bl	8004714 <__malloc_lock>
 8004b10:	4a1d      	ldr	r2, [pc, #116]	@ (8004b88 <_free_r+0x90>)
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	b933      	cbnz	r3, 8004b24 <_free_r+0x2c>
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	6014      	str	r4, [r2, #0]
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b20:	f7ff bdfe 	b.w	8004720 <__malloc_unlock>
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d908      	bls.n	8004b3a <_free_r+0x42>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	1821      	adds	r1, r4, r0
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	bf01      	itttt	eq
 8004b30:	6819      	ldreq	r1, [r3, #0]
 8004b32:	685b      	ldreq	r3, [r3, #4]
 8004b34:	1809      	addeq	r1, r1, r0
 8004b36:	6021      	streq	r1, [r4, #0]
 8004b38:	e7ed      	b.n	8004b16 <_free_r+0x1e>
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	b10b      	cbz	r3, 8004b44 <_free_r+0x4c>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d9fa      	bls.n	8004b3a <_free_r+0x42>
 8004b44:	6811      	ldr	r1, [r2, #0]
 8004b46:	1850      	adds	r0, r2, r1
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d10b      	bne.n	8004b64 <_free_r+0x6c>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	4401      	add	r1, r0
 8004b50:	1850      	adds	r0, r2, r1
 8004b52:	4283      	cmp	r3, r0
 8004b54:	6011      	str	r1, [r2, #0]
 8004b56:	d1e0      	bne.n	8004b1a <_free_r+0x22>
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	4408      	add	r0, r1
 8004b60:	6010      	str	r0, [r2, #0]
 8004b62:	e7da      	b.n	8004b1a <_free_r+0x22>
 8004b64:	d902      	bls.n	8004b6c <_free_r+0x74>
 8004b66:	230c      	movs	r3, #12
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	e7d6      	b.n	8004b1a <_free_r+0x22>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf04      	itt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	6063      	str	r3, [r4, #4]
 8004b7a:	bf04      	itt	eq
 8004b7c:	1809      	addeq	r1, r1, r0
 8004b7e:	6021      	streq	r1, [r4, #0]
 8004b80:	6054      	str	r4, [r2, #4]
 8004b82:	e7ca      	b.n	8004b1a <_free_r+0x22>
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
 8004b86:	bf00      	nop
 8004b88:	200002ec 	.word	0x200002ec

08004b8c <_init>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr

08004b98 <_fini>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr
